import ssl
from typing import Any, Dict, Union
import attr
{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, multipart_body,
    arguments, client, kwargs, parse_response, docstring %}

{% for collection in endpoint_collections_by_tag.values() %}
{% for endpoint in collection.endpoints %}
from customgpt_client.api.{{endpoint.tag}} import {{endpoint.name}}
{% if endpoint.json_body %}
from customgpt_client.models import {{endpoint.json_body.class_info.name}}
{% endif %}
{% if endpoint.multipart_body %}
from customgpt_client.models import {{endpoint.multipart_body.class_info.name}}
{% endif %}
{% endfor %}
{% endfor %}

def set_client():
    api_key = CustomGPT.api_key if hasattr(CustomGPT, 'api_key') else ""
    base_url = CustomGPT.base_url if hasattr(CustomGPT, 'base_url') else "https://app.customgpt.ai"
    timeout = CustomGPT.timeout if hasattr(CustomGPT, 'timeout') else 100.0
    return CustomGPT(api_key=api_key, base_url=base_url, timeout=timeout)
def pluck_data(fields, kwargs):
    json = {}
    for field in fields:
        if field in kwargs:
            json[field] = kwargs.pop(field)
    return json

@attr.s(auto_attribs=True)
class CustomGPT:
    """ A Client which has been authenticated for use on secured endpoints 
    Attributes:
        base_url: The base URL for the API, all requests are made to a relative path to this URL
        cookies: A dictionary of cookies to be sent with every request
        headers: A dictionary of headers to be sent with every request
        timeout: The maximum amount of a time in seconds a request can take. API functions will raise
            httpx.TimeoutException if this is exceeded.
        verify_ssl: Whether or not to verify the SSL certificate of the API server. This should be True in production,
            but can be set to False for testing purposes.
        raise_on_unexpected_status: Whether or not to raise an errors.UnexpectedStatus if the API returns a
            status code that was not documented in the source OpenAPI document.
        follow_redirects: Whether or not to follow redirects. Default value is False.
    """

    api_key: str
    prefix: str = "Bearer"
    auth_header_name: str = "Authorization"
    base_url: str = attr.ib("https://app.customgpt.ai")
    cookies: Dict[str, str] = attr.ib(factory=dict, kw_only=True)
    headers: Dict[str, str] = attr.ib(factory=dict, kw_only=True)
    timeout: float = attr.ib(5.0, kw_only=True)
    verify_ssl: Union[str, bool, ssl.SSLContext] = attr.ib(True, kw_only=True)
    raise_on_unexpected_status: bool = attr.ib(False, kw_only=True)
    follow_redirects: bool = attr.ib(False, kw_only=True)

    def with_headers(self, headers: Dict[str, str]) -> "CustomGPT":
        """ Get a new client matching this one with additional headers """
        return attr.evolve(self, headers={**self.headers, **headers})

    def get_cookies(self) -> Dict[str, str]:
        return {**self.cookies}

    def with_cookies(self, cookies: Dict[str, str]) -> "CustomGPT":
        """ Get a new client matching this one with additional cookies """
        return attr.evolve(self, cookies={**self.cookies, **cookies})

    def get_timeout(self) -> float:
        return self.timeout

    def with_timeout(self, timeout: float) -> "CustomGPT":
        """ Get a new client matching this one with a new timeout (in seconds) """
        return attr.evolve(self, timeout=timeout)

    def get_headers(self) -> Dict[str, str]:
        """Get headers to be used in authenticated endpoints"""
        auth_header_value = f"{self.prefix} {self.api_key}" if self.prefix else self.api_key
        return {self.auth_header_name: auth_header_value, **self.headers}

    {% for key, collection in endpoint_collections_by_tag.items() %}
    {% if "_" in key %}
        {% set words = key.split('_') %}
        {% set capitalized_words = [] %}
        {% for word in words %}
            {% set _ = capitalized_words.append(word.capitalize()) %}
        {% endfor %}
        {% set class_name = "".join(capitalized_words) %}
    {% elif key.endswith("s") %}
        {% set class_name = key[:-1].capitalize() %}
    {% else %}
        {% set class_name = key.capitalize() %}
    {% endif %}
    class {{class_name}}:
        {% for endpoint in collection.endpoints %}
        def {{ endpoint.name.split('_')[0] }}(*args: Any, **kwargs: Any):
            client = set_client()
            {% if endpoint.json_body %}
            fields = {{endpoint.json_body.data.properties.keys() | list}}
            json = pluck_data(fields, kwargs)
            kwargs['json_body'] = {{endpoint.json_body.class_info.name}}(**json)
            {% endif %}
            {% if endpoint.multipart_body %}
            fields = {{endpoint.multipart_body.data.properties.keys()| list}}
            json = pluck_data(fields, kwargs)
            kwargs['multipart_data'] = {{endpoint.multipart_body.class_info.name}}(**json)
            {% endif %}
     
            return {{endpoint.name}}.sync_detailed(client=client, *args, **kwargs)

        def a{{ endpoint.name.split('_')[0]}}(*args: Any, **kwargs: Any):
            client = set_client()
            {% if endpoint.json_body %}
            fields = {{endpoint.json_body.data.properties.keys()| list}}
            json = pluck_data(fields, kwargs)
            kwargs['json_body'] = {{endpoint.json_body.class_info.name}}(**json)
            {% endif %}
            {% if endpoint.multipart_body %}
            fields = {{endpoint.multipart_body.data.properties.keys()| list}}
            json = pluck_data(fields, kwargs)
            kwargs['multipart_data'] = {{endpoint.multipart_body.class_info.name}}(**json)
            {% endif %}
     
            return {{endpoint.name}}.asyncio_detailed(client=client, *args, **kwargs)
    {% endfor %}
    {% endfor %}




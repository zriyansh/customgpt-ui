from http import HTTPStatus
from typing import Any, Dict, List, Optional, Union, cast
import inspect
import requests
import json
import re
from ...types import Response, UNSET
from ... import errors
from sseclient import SSEClient

{% for relative in endpoint.relative_imports %}
{{ relative }}
{% endfor %}

{% from "endpoint_macros.py.jinja" import header_params, cookie_params, query_params, json_body, multipart_body,
    arguments, client, kwargs, parse_response, docstring %}
{% set return_string = endpoint.response_type() %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "Any" %}

def _get_kwargs(
    {{ arguments(endpoint) | indent(4) }}
) -> Dict[str, Any]:
    url = "{}{{ endpoint.path }}".format(
        client.base_url
        {%- for parameter in endpoint.path_parameters.values() -%}
        ,{{parameter.name}}={{parameter.python_name}}
        {%- endfor -%}
    )

    headers: Dict[str, str] = client.get_headers()
    cookies: Dict[str, Any] = client.get_cookies()
    {{ header_params(endpoint) | indent(4) }}

    {{ cookie_params(endpoint) | indent(4) }}

    {{ query_params(endpoint) | indent(4) }}

    {{ json_body(endpoint) | indent(4) }}

    {{ multipart_body(endpoint) | indent(4) }}
    {% if 'stream' in endpoint.query_parameters.keys()  %}
    if stream:
        headers['Accept'] = 'text/event-stream'
    {% endif %}

    return {
        "method": "{{ endpoint.method }}",
        "url": url,
        "headers": headers,
        "cookies": cookies,
        "timeout": client.get_timeout(),
        "allow_redirects": client.follow_redirects,
        {% if endpoint.form_body %}
        "data": form_data.to_dict(),
        {% elif endpoint.multipart_body %}
        "files": {{ "multipart_" + endpoint.multipart_body.python_name }},
        {% elif endpoint.json_body %}
        "json": {{ "json_" + endpoint.json_body.python_name }},
        {% endif %}
        {% if endpoint.query_parameters %}
        "params": params,
        {% endif %}
        {% if 'stream' in endpoint.query_parameters.keys()  %}
        "stream": stream
        {% endif %}
    }


def _parse_response(*, client: {}, response: None) -> Optional[{{ return_string }}]:
    {% for response in endpoint.responses %}
    if response.status_code == HTTPStatus.{{ response.status_code.name }}:
        {% if parsed_responses %}{% import "property_templates/" + response.prop.template as prop_template %}
        {% if prop_template.construct %}
        {{ prop_template.construct(response.prop, 'json.loads(response.text)') | indent(8)}}
        {% else %}
        {{ response.prop.python_name }} = cast({{ response.prop.get_type_string() }}, {{ response.source }})
        {% endif %}
        return {{ response.prop.python_name }}
        {% else %}
        return None
        {% endif %}
    {% endfor %}
    if client.raise_on_unexpected_status:
        raise errors.UnexpectedStatus(response.status_code, response.content)
    else:
        return None


def _build_response(*, client: {}, response: None, content: Optional[bytes] = None) -> Response[{{ return_string }}]:
    parse = _parse_response(client=client, response=response)
    return Response(
        status_code=HTTPStatus(response.status_code),
        content=response.content if content is None else content,
        headers=response.headers,
        parsed=parse,
    )

def sync_detailed(
    {{ arguments(endpoint) | indent(4) }}
):
    {{ docstring(endpoint, return_string, is_detailed=true) | indent(4) }}
    {% if 'stream' in endpoint.query_parameters.keys()  %}
    kwargs = _get_kwargs(
        {{ kwargs(endpoint) }}
    )

    response = requests.request(
        **kwargs,
    )

    if stream:
        return SSEClient(response)
    else:
        return _build_response(client=client, response=response)
    {% else %}

    kwargs = _get_kwargs(
        {{ kwargs(endpoint) }}
    )

    response = requests.request(
        **kwargs,
    )

    return _build_response(client=client, response=response)
    {% endif %}

{% if parsed_responses %}
def sync(
    {{ arguments(endpoint) | indent(4) }}
) -> Optional[{{ return_string }}]:
    {{ docstring(endpoint, return_string, is_detailed=false) | indent(4) }}

    return sync_detailed(
        {{ kwargs(endpoint) }}
    ).parsed
{% endif %}

async def asyncio_detailed(
    {{ arguments(endpoint) | indent(4) }}
) -> Response[{{ return_string }}]:
    {% if 'stream' in endpoint.query_parameters.keys()  %}
    kwargs = _get_kwargs(
        {{ kwargs(endpoint) }}
    )

    response = requests.request(
        **kwargs,
    )

    if stream:
        return SSEClient(response)
    else:
        return _build_response(client=client, response=response)
    {% else %}

    kwargs = _get_kwargs(
        {{ kwargs(endpoint) }}
    )

    response = requests.request(
        **kwargs,
    )

    return _build_response(client=client, response=response)
    {% endif %}

{% if parsed_responses %}
async def asyncio(
    {{ arguments(endpoint) | indent(4) }}
) -> Optional[{{ return_string }}]:
    {{ docstring(endpoint, return_string, is_detailed=false) | indent(4) }}

    return (await asyncio_detailed(
        {{ kwargs(endpoint) }}
    )).parsed
{% endif %}
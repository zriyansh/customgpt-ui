{"version":3,"file":"iframe-app.js","mappings":"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","sources":["webpack://customgpt-ui/webpack/runtime/chunk loaded","webpack://customgpt-ui/./src/lib/utils.ts","webpack://customgpt-ui/./src/lib/logger.ts","webpack://customgpt-ui/./src/lib/api/client.ts","webpack://customgpt-ui/./src/store/config.ts","webpack://customgpt-ui/./src/store/agents.ts","webpack://customgpt-ui/./src/store/conversations.ts","webpack://customgpt-ui/./src/lib/streaming/handler.ts","webpack://customgpt-ui/./src/store/messages.ts","webpack://customgpt-ui/./src/store/analytics.ts","webpack://customgpt-ui/./src/store/ui.ts","webpack://customgpt-ui/./src/store/project-settings.ts","webpack://customgpt-ui/./src/store/pages.ts","webpack://customgpt-ui/./src/store/sources.ts","webpack://customgpt-ui/./src/store/profile.ts","webpack://customgpt-ui/./src/store/licenses.ts","webpack://customgpt-ui/./src/components/ui/button.tsx","webpack://customgpt-ui/./src/components/chat/CitationList.tsx","webpack://customgpt-ui/./src/components/chat/Message.tsx","webpack://customgpt-ui/./src/components/chat/ChatInput.tsx","webpack://customgpt-ui/./src/components/chat/TypingIndicator.tsx","webpack://customgpt-ui/./src/components/chat/AgentSelector.tsx","webpack://customgpt-ui/./src/components/chat/CitationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/ConversationManager.tsx","webpack://customgpt-ui/./src/components/chat/ChatContainer.tsx","webpack://customgpt-ui/./src/components/chat/ConversationSidebar.tsx","webpack://customgpt-ui/./src/components/chat/ChatLayout.tsx","webpack://customgpt-ui/./src/widget/iframe-app.tsx","webpack://customgpt-ui/webpack/bootstrap","webpack://customgpt-ui/webpack/runtime/compat get default export","webpack://customgpt-ui/webpack/runtime/define property getters","webpack://customgpt-ui/webpack/runtime/global","webpack://customgpt-ui/webpack/runtime/hasOwnProperty shorthand","webpack://customgpt-ui/webpack/runtime/make namespace object","webpack://customgpt-ui/webpack/runtime/jsonp chunk loading","webpack://customgpt-ui/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * For contributors:\n * - Keep utilities pure and reusable\n * - Add JSDoc comments for all functions\n * - Include examples in comments\n * - Handle edge cases gracefully\n * - Export constants for configuration\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Suitable for temporary IDs, not cryptographically secure.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Fail silently but log for debugging\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    console.log('🔍 Parsing stream chunk:', chunk);\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      console.log('📌 SSE event:', eventType);\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      console.log('📦 SSE data:', data);\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        console.log('🎯 Parsed SSE JSON:', parsed);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        console.log('📝 Plain text data:', data);\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        console.log('🎯 Parsed raw JSON:', parsed);\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      console.log('📝 Plain text chunk:', chunk.trim());\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  const words = firstMessage.trim().split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a temporary blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","export type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      debug: 'color: #6B7280; font-weight: normal;',\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        debug: '\\x1b[90m',\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Send to server for file logging\n    if (level !== 'debug' || !this.isClient) {\n      this.sendToServer(entry);\n    }\n  }\n\n  private async sendToServer(entry: LogEntry) {\n    try {\n      await fetch('/api/log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(entry),\n      });\n    } catch (error) {\n      // Silently fail to avoid infinite loop\n    }\n  }\n\n  debug(category: string, message: string, data?: any) {\n    this.log('debug', category, message, data);\n  }\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.debug('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * CustomGPT API Client\n * \n * Central API client for all CustomGPT.ai backend communication.\n * This client handles:\n * - Authentication via API key\n * - Request/response formatting\n * - Error handling and retries\n * - Streaming responses for real-time chat\n * - File uploads for agent training\n * \n * Architecture:\n * - Uses native fetch API\n * - Supports both REST and streaming endpoints\n * - Implements exponential backoff for retries\n * - Manages abort controllers for cancellation\n * \n * Key Features:\n * - Type-safe API methods\n * - Automatic retry with backoff\n * - Request timeout handling\n * - Stream parsing for chat responses\n * - Comprehensive error logging\n * \n * For contributors:\n * - All API methods should be type-safe\n * - Handle both successful and error responses\n * - Use logger for debugging\n * - Support request cancellation\n * - Document any API quirks or workarounds\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff, delay } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n/**\n * User profile API response format\n */\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * Configuration options for the API client\n */\nexport interface CustomGPTClientConfig {\n  /** CustomGPT.ai API key for authentication */\n  apiKey: string;\n  /** Base URL for API calls (defaults to production) */\n  baseURL?: string;\n  /** Request timeout in milliseconds (default: 30000) */\n  timeout?: number;\n  /** Number of retry attempts for failed requests (default: 3) */\n  retryAttempts?: number;\n  /** Delay between retries in milliseconds (default: 1000) */\n  retryDelay?: number;\n}\n\n/**\n * Extended fetch options with additional features\n */\nexport interface RequestOptions extends RequestInit {\n  /** Request timeout override */\n  timeout?: number;\n  /** Retry attempts override */\n  retryAttempts?: number;\n  /** Query parameters to append to URL */\n  params?: Record<string, string | number | boolean>;\n}\n\n/**\n * Options for handling streaming responses\n */\nexport interface StreamOptions {\n  /** Called for each chunk of streaming data */\n  onChunk?: (chunk: StreamChunk) => void;\n  /** Called when streaming completes successfully */\n  onComplete?: () => void;\n  /** Called if streaming encounters an error */\n  onError?: (error: Error) => void;\n  /** Timeout for the stream */\n  timeout?: number;\n}\n\n/**\n * Main API client class\n * \n * Usage:\n * ```typescript\n * const client = new CustomGPTAPIClient({\n *   apiKey: 'your-api-key',\n *   baseURL: 'https://app.customgpt.ai/api/v1'\n * });\n * \n * // Get agents\n * const agents = await client.getAgents();\n * \n * // Send message with streaming\n * await client.sendMessageStream(agentId, sessionId, message, {\n *   onChunk: (chunk) => console.log(chunk),\n *   onComplete: () => console.log('Done')\n * });\n * ```\n */\nexport class CustomGPTAPIClient {\n  private baseURL: string;\n  private apiKey: string;\n  private timeout: number;\n  private retryAttempts: number;\n  private retryDelay: number;\n  /** Map of request IDs to abort controllers for cancellation */\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor(config: CustomGPTClientConfig) {\n    this.apiKey = config.apiKey;\n    this.baseURL = config.baseURL || 'https://app.customgpt.ai/api/v1';\n    this.timeout = config.timeout || 30000;\n    this.retryAttempts = config.retryAttempts || 3;\n    this.retryDelay = config.retryDelay || 1000;\n    \n    // Log initialization for debugging\n    logger.info('API_CLIENT', 'CustomGPT API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      hasApiKey: !!this.apiKey,\n      apiKeyPreview: this.apiKey ? `${this.apiKey.substring(0, 10)}...` : 'none'\n    });\n  }\n\n  /**\n   * Generic request method with retry logic and error handling\n   * \n   * Features:\n   * - Automatic retry with exponential backoff\n   * - Request timeout handling\n   * - Proper error messages for debugging\n   * - Request cancellation support\n   * \n   * @param endpoint - API endpoint path (e.g., '/projects')\n   * @param options - Request options including method, body, etc.\n   * @returns Promise resolving to the API response\n   * @throws Error if request fails after all retries\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestOptions = {}\n  ): Promise<T> {\n    const {\n      timeout = this.timeout,\n      retryAttempts = this.retryAttempts,\n      params,\n      ...fetchOptions\n    } = options;\n\n    // Build URL with query parameters\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const headers: Record<string, string> = {\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Accept': 'application/json',\n      ...(fetchOptions.headers as Record<string, string>),\n    };\n\n    // Only set Content-Type if body is not FormData\n    if (!(fetchOptions.body instanceof FormData)) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const requestOptions: RequestInit = {\n      ...fetchOptions,\n      headers,\n    };\n\n    // Log the request\n    logger.apiRequest(endpoint, fetchOptions.method || 'GET', {\n      url: url.toString(),\n      headers: {\n        ...headers,\n        'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...` // Mask API key\n      },\n      body: fetchOptions.body ? \n        (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') \n        : undefined\n    });\n\n    return retryWithBackoff(\n      async () => {\n        const abortController = new AbortController();\n        const requestId = this.generateRequestId();\n        this.abortControllers.set(requestId, abortController);\n\n        // Set timeout\n        const timeoutId = setTimeout(() => {\n          abortController.abort();\n        }, timeout);\n\n        try {\n          const response = await fetch(url.toString(), {\n            ...requestOptions,\n            signal: abortController.signal,\n          });\n\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            let errorMessage: string;\n            let errorCode: string | undefined;\n            \n            try {\n              const errorData = JSON.parse(errorText);\n              // Handle both direct error format and nested data format\n              if (errorData.data && errorData.data.code && errorData.data.message) {\n                errorMessage = errorData.data.message;\n                errorCode = errorData.data.code.toString();\n              } else {\n                errorMessage = errorData.message || errorData.error || 'Unknown error';\n                errorCode = errorData.code?.toString();\n              }\n            } catch {\n              errorMessage = errorText || `HTTP ${response.status}`;\n            }\n\n            // Enhance error messages based on status codes and API documentation\n            const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n            logger.apiError(endpoint, {\n              status: response.status,\n              message: enhancedMessage,\n              originalMessage: errorMessage,\n              errorCode,\n              headers: Object.fromEntries(response.headers.entries())\n            });\n\n            throw new APIError(response.status, enhancedMessage, errorCode);\n          }\n\n          const data = await response.json();\n          \n          logger.apiResponse(endpoint, response.status, {\n            headers: Object.fromEntries(response.headers.entries()),\n            dataPreview: JSON.stringify(data).substring(0, 200) + '...'\n          });\n\n          return data;\n        } catch (error) {\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n          \n          if (error instanceof APIError) {\n            throw error;\n          }\n          \n          if (error instanceof Error && error.name === 'AbortError') {\n            throw new APIError(408, 'Request timeout');\n          }\n          \n          throw new APIError(0, error instanceof Error ? error.message : 'Network error');\n        }\n      },\n      retryAttempts,\n      this.retryDelay\n    );\n  }\n\n  /**\n   * Streaming request method for real-time responses\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestOptions = {},\n    streamOptions: StreamOptions = {}\n  ): Promise<void> {\n    const {\n      timeout = 60000, // Longer timeout for streaming\n      params,\n      ...fetchOptions\n    } = options;\n\n    const { onChunk, onComplete, onError } = streamOptions;\n    \n    logger.info('API_CLIENT', 'Starting stream request', {\n      endpoint,\n      method: options.method || 'GET',\n      hasBody: !!fetchOptions.body,\n      bodyContent: fetchOptions.body ? (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') : undefined\n    });\n\n    // Build URL with stream parameter - CustomGPT requires stream=1 in query params\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    url.searchParams.append('stream', '1');\n    url.searchParams.append('lang', 'en'); // Add required lang parameter\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const abortController = new AbortController();\n    const requestId = this.generateRequestId();\n    this.abortControllers.set(requestId, abortController);\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      abortController.abort();\n    }, timeout);\n\n    try {\n      logger.apiRequest(endpoint, fetchOptions.method || 'POST', {\n        url: url.toString(),\n        headers: {\n          'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: fetchOptions.body ? JSON.parse(fetchOptions.body as string) : undefined\n      });\n      \n      const response = await fetch(url.toString(), {\n        ...fetchOptions,\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n          ...fetchOptions.headers,\n        },\n        signal: abortController.signal,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        let errorCode: string | undefined;\n        \n        try {\n          const errorData = JSON.parse(errorText);\n          // Handle both direct error format and nested data format\n          if (errorData.data && errorData.data.code && errorData.data.message) {\n            errorMessage = errorData.data.message;\n            errorCode = errorData.data.code.toString();\n          } else {\n            errorMessage = errorData.message || errorData.error || 'Unknown error';\n            errorCode = errorData.code?.toString();\n          }\n        } catch {\n          errorMessage = errorText || `HTTP ${response.status}`;\n        }\n\n        // Enhance error messages\n        const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n        logger.apiError(endpoint, {\n          status: response.status,\n          message: enhancedMessage,\n          originalMessage: errorMessage,\n          errorCode,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n        \n        throw new APIError(response.status, enhancedMessage, errorCode);\n      }\n      \n      logger.apiResponse(endpoint, response.status, {\n        headers: Object.fromEntries(response.headers.entries()),\n        contentType: response.headers.get('content-type'),\n        isEventStream: response.headers.get('content-type')?.includes('text/event-stream')\n      });\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new APIError(500, 'No response body');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      try {\n        let hasReceivedData = false;\n        \n        while (true) {\n          const { done, value } = await reader.read();\n          \n          if (done) {\n            logger.info('STREAM', 'Stream ended', { hasReceivedData });\n            \n            // If we haven't received any data, this might indicate an issue\n            if (!hasReceivedData) {\n              logger.warn('STREAM', 'Stream ended without receiving any data - possible API issue');\n              onError?.(new Error('No data received from stream - the API may not support streaming or there was a connection issue'));\n              return;\n            }\n            \n            onComplete?.();\n            break;\n          }\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n          for (const line of lines) {\n            if (line.trim()) {\n              hasReceivedData = true;\n              \n              logger.debug('STREAM', 'Raw SSE line received', { \n                line: line.substring(0, 200),\n                fullLine: line,\n                lineLength: line.length \n              });\n              \n              const chunk = parseStreamChunk(line);\n              if (chunk) {\n                logger.debug('STREAM', 'Successfully parsed chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentPreview: chunk.content?.substring(0, 100),\n                  hasCitations: !!chunk.citations\n                });\n                \n                if (chunk.type === 'done') {\n                  logger.info('STREAM', 'Stream completed with done signal');\n                  onComplete?.();\n                  return;\n                } else if (chunk.type === 'error') {\n                  logger.error('STREAM', 'Stream error received', { error: chunk.error });\n                  onError?.(new Error(chunk.error || 'Stream error'));\n                  return;\n                } else {\n                  onChunk?.(chunk);\n                }\n              } else {\n                logger.warn('STREAM', 'Failed to parse chunk or chunk was null', { \n                  originalLine: line.substring(0, 200) \n                });\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      if (error instanceof APIError) {\n        onError?.(error);\n      } else if (error instanceof Error && error.name === 'AbortError') {\n        onError?.(new APIError(408, 'Request timeout'));\n      } else {\n        onError?.(new APIError(0, error instanceof Error ? error.message : 'Network error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel a request by ID\n   */\n  public cancelRequest(requestId: string): void {\n    const controller = this.abortControllers.get(requestId);\n    if (controller) {\n      controller.abort();\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel all active requests\n   */\n  public cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  private generateRequestId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  /**\n   * Enhance error messages based on API documentation and status codes\n   */\n  private getEnhancedErrorMessage(status: number, originalMessage: string, errorCode?: string): string {\n    // Handle specific error codes from API documentation\n    switch (status) {\n      case 400:\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID provided. Please ensure you have selected a valid agent.';\n        }\n        if (originalMessage.includes('Agent name can\\'t be empty')) {\n          return 'Agent name cannot be empty. Please provide a valid agent name.';\n        }\n        return 'Invalid request data. Please check your input and try again.';\n      \n      case 401:\n        if (originalMessage.includes('API Token is either missing or invalid')) {\n          return 'Authentication failed. Your API key is missing or invalid. Please check your API key in settings and ensure it has proper permissions.';\n        }\n        return 'Authentication failed. Please check your API key and try again.';\n      \n      case 403:\n        if (originalMessage.includes('license')) {\n          return 'You do not have permission to manage licenses for this agent. Please ensure your API key has the necessary permissions or you are the owner of this agent.';\n        }\n        if (originalMessage.includes('Licenses are not allowed')) {\n          return 'License management is not enabled for this agent. Please enable licenses in the agent settings first.';\n        }\n        return 'Access denied. You do not have permission to perform this action. Please check your API key permissions.';\n      \n      case 404:\n        if (originalMessage.includes('Agent with id')) {\n          return 'The selected agent was not found or you don\\'t have access to it. Please select a different agent or check your permissions.';\n        }\n        if (originalMessage.includes('Agent license with id')) {\n          return 'The specified license was not found. It may have been deleted or you may not have access to it.';\n        }\n        if (originalMessage.includes('Conversation message with id') || originalMessage.includes('not found')) {\n          return 'The requested conversation or message was not found. It may have been deleted or you may not have access to it.';\n        }\n        return 'The requested resource was not found. Please check if it exists and you have access to it.';\n      \n      case 429:\n        if (originalMessage.includes('exhausted your current query credits')) {\n          return 'You have reached your query limit. Please upgrade your plan or contact customer support at https://customgpt.freshdesk.com/support/home for assistance.';\n        }\n        return 'Rate limit exceeded. Please wait a moment and try again, or contact support if you need higher limits.';\n      \n      case 500:\n        if (originalMessage.includes('Internal Server Error')) {\n          return 'Server error occurred. Please try again in a few moments. If the problem persists, contact customer support.';\n        }\n        return 'An unexpected server error occurred. Please try again later.';\n      \n      case 501:\n        if (originalMessage.includes('audio is not yet supported')) {\n          return 'Audio files are not currently supported. Please remove any audio files from your request and try again with text or other supported file types.';\n        }\n        return 'This feature is not yet implemented. Please try a different approach.';\n      \n      case 408:\n        return 'Request timed out. Please check your internet connection and try again.';\n      \n      case 422:\n        // Unprocessable Entity - often used for validation errors\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID format. Please ensure the agent ID is a valid number.';\n        }\n        return 'Invalid data provided. Please check your input and ensure all required fields are correctly formatted.';\n      \n      default:\n        // For other status codes, return the original message with context\n        if (status >= 500) {\n          return `Server error (${status}): ${originalMessage}. Please try again later.`;\n        } else if (status >= 400) {\n          return `Request error (${status}): ${originalMessage}. Please check your input and try again.`;\n        }\n        return originalMessage;\n    }\n  }\n\n  // AGENTS/PROJECTS API METHODS\n\n  /**\n   * Get list of agents\n   */\n  async getAgents(params?: {\n    page?: number;\n    duration?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n  }): Promise<AgentsResponse> {\n    return this.request<AgentsResponse>('/projects', { params });\n  }\n\n  /**\n   * Create new agent/project\n   */\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    files?: File[];\n    is_shared?: boolean;\n  }): Promise<APIResponse<Agent>> {\n    // API requires multipart/form-data\n    const formData = new FormData();\n    formData.append('project_name', data.project_name);\n    \n    if (data.sitemap_path) {\n      formData.append('sitemap_path', data.sitemap_path);\n    }\n    \n    if (data.files && data.files.length > 0) {\n      data.files.forEach((file, index) => {\n        formData.append(`files[${index}]`, file);\n      });\n    }\n    \n    if (data.is_shared !== undefined) {\n      formData.append('is_shared', data.is_shared.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>('/projects', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Get single agent by ID\n   */\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}`);\n  }\n\n\n  /**\n   * Update agent - API only supports updating are_licenses_allowed\n   */\n  async updateAgent(id: number, data: { are_licenses_allowed?: boolean }): Promise<APIResponse<Agent>> {\n    const formData = new FormData();\n    if (data.are_licenses_allowed !== undefined) {\n      formData.append('are_licenses_allowed', data.are_licenses_allowed.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n  \n  /**\n   * Replicate agent\n   */\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n  \n  /**\n   * Get agent stats\n   */\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request<APIResponse<AgentStats>>(`/projects/${id}/stats`);\n  }\n\n  /**\n   * Get agent settings\n   */\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`);\n  }\n\n  /**\n   * Update agent settings\n   */\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    \n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n    });\n  }\n\n  // CONVERSATIONS API METHODS\n\n  /**\n   * Get conversations for a project\n   */\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const enhancedParams = {\n      ...params,\n      userFilter: params?.userFilter || 'all'\n    };\n    return this.request<ConversationsResponse>(`/projects/${projectId}/conversations`, { params: enhancedParams });\n  }\n\n  /**\n   * Create new conversation\n   */\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : JSON.stringify({}),\n    });\n  }\n\n  /**\n   * Update conversation\n   */\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete conversation\n   */\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // MESSAGES API METHODS\n\n  /**\n   * Get messages for a conversation\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: { page?: number; order?: 'asc' | 'desc' }\n  ): Promise<MessagesResponse> {\n    // Add required parameters for message retrieval\n    const enhancedParams = {\n      ...params,\n      stream: false,\n      lang: 'en'\n    };\n    return this.request<MessagesResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, { params: enhancedParams });\n  }\n\n  /**\n   * Send message (non-streaming)\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    }\n  ): Promise<MessageResponse> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 0\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    return this.request<MessageResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      params: { \n        stream: false, \n        lang: 'en' \n      }\n    });\n  }\n\n  /**\n   * Send message with streaming\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    },\n    streamOptions: StreamOptions\n  ): Promise<void> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 1\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    logger.info('API_CLIENT', 'Sending streaming message', {\n      projectId,\n      sessionId,\n      prompt: data.prompt.substring(0, 50),\n      hasCustomPersona: !!data.custom_persona,\n      responseSource: payload.response_source,\n      streamParam: payload.stream\n    });\n    \n    return this.streamRequest(\n      `/projects/${projectId}/conversations/${sessionId}/messages`,\n      {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        params: {\n          stream: 1, // Also include in query params\n          lang: 'en'\n        }\n      },\n      streamOptions\n    );\n  }\n\n  /**\n   * Get a message by ID\n   */\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    promptId: number\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}`\n    );\n  }\n\n  /**\n   * Update message feedback\n   */\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    promptId: number,\n    data: { reaction: 'neutral' | 'disliked' | 'liked' }\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}/feedback`,\n      {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      }\n    );\n  }\n\n  /**\n   * Send message in OpenAI format\n   */\n  async sendMessageOpenAIFormat(\n    projectId: number,\n    data: {\n      messages?: Array<{ role: string; content: string }>;\n      stream?: boolean;\n      lang?: string;\n      is_inline_citation?: boolean;\n    }\n  ): Promise<any> {\n    return this.request<any>(`/projects/${projectId}/chat/completions`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ...data,\n        stream: data.stream ?? false,\n        lang: data.lang || 'en',\n        is_inline_citation: data.is_inline_citation ?? false\n      }),\n    });\n  }\n\n  // CITATIONS API METHODS\n\n  /**\n   * Get citation details\n   */\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request<CitationResponse>(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  // SOURCES API METHODS\n\n\n  /**\n   * Upload file to project\n   */\n  async uploadFile(projectId: number, file: File, options?: {\n    file_data_retension?: boolean;\n    is_ocr_enabled?: boolean;\n    is_anonymized?: boolean;\n  }): Promise<APIResponse<any>> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        if (value !== undefined) {\n          formData.append(key, value.toString());\n        }\n      });\n    }\n\n    return this.request<APIResponse<any>>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Analytics APIs\n   */\n  async getConversationAnalytics(\n    projectId: number, \n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/conversations${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getQueryAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/queries${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getTrafficAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      period?: 'hour' | 'day' | 'week' | 'month';\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.period) queryParams.append('period', params.period);\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/traffic${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getStatistics(projectId: number): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/statistics`);\n  }\n\n  // Reports and Analytics methods\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request<TrafficReportResponse>(`/projects/${projectId}/reports/traffic`, {\n      method: 'GET',\n    });\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request<QueriesReportResponse>(`/projects/${projectId}/reports/queries`, {\n      method: 'GET',\n    });\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request<ConversationsReportResponse>(`/projects/${projectId}/reports/conversations`, {\n      method: 'GET',\n    });\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) {\n      queryParams.append('interval', interval);\n    }\n    \n    return this.request<AnalysisReportResponse>(\n      `/projects/${projectId}/reports/analysis${queryParams.toString() ? `?${queryParams}` : ''}`,\n      {\n        method: 'GET',\n      }\n    );\n  }\n\n  /**\n   * Page Management APIs\n   */\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    return this.request<PagesListResponse>(\n      `/projects/${projectId}/pages${queryParams.toString() ? `?${queryParams}` : ''}`\n    );\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request<DeletePageResponse>(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request<ReindexPageResponse>(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  // Page Metadata methods\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'GET',\n    });\n  }\n\n  async updatePageMetadata(\n    projectId: number, \n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  async previewFile(pageId: number): Promise<any> {\n    return this.request<any>(`/preview/${pageId}`);\n  }\n\n\n  /**\n   * Agent License Management APIs\n   */\n  \n  /**\n   * Get all licenses for an agent\n   */\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request<APIResponse<any[]>>(`/projects/${projectId}/licenses`);\n  }\n\n  /**\n   * Create a new license for an agent\n   */\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Get a specific license for an agent\n   */\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`);\n  }\n\n  /**\n   * Update a license for an agent\n   */\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name: string }\n  ): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete a license for an agent\n   */\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Sources Management APIs\n   */\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request<SourcesListResponse>(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request<DeleteSourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // LIMITS API METHODS\n  \n  /**\n   * Get user's agents, words and queries limit\n   */\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request<LimitsResponse>('/limits/usage');\n  }\n\n  // User Profile API Methods\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n\n  // Generic request methods for use by stores\n  async get<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint);\n  }\n\n  async post<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data instanceof FormData ? data : (data ? JSON.stringify(data) : undefined),\n    });\n  }\n\n  async put<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport class APIError extends Error {\n  constructor(\n    public status: number,\n    message: string,\n    public code?: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n// Default client instance (will be initialized with API key)\nlet defaultClient: CustomGPTAPIClient | null = null;\n\nexport function getClient(): CustomGPTAPIClient {\n  if (!defaultClient) {\n    throw new Error('API client not initialized. Call initializeClient() first.');\n  }\n  return defaultClient;\n}\n\nexport function initializeClient(config: CustomGPTClientConfig): CustomGPTAPIClient {\n  defaultClient = new CustomGPTAPIClient(config);\n  return defaultClient;\n}\n\nexport function isClientInitialized(): boolean {\n  return defaultClient !== null;\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { initializeClient, isClientInitialized } from '@/lib/api/client';\n\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null,\n      baseURL: 'https://app.customgpt.ai/api/v1',\n      theme: 'light',\n\n      setApiKey: (key: string) => {\n        set({ apiKey: key });\n        \n        // Initialize API client with new key\n        if (key) {\n          initializeClient({\n            apiKey: key,\n            baseURL: get().baseURL,\n          });\n        }\n      },\n\n      setBaseURL: (url: string) => {\n        set({ baseURL: url });\n        \n        // Re-initialize client if API key exists\n        const { apiKey } = get();\n        if (apiKey) {\n          initializeClient({\n            apiKey,\n            baseURL: url,\n          });\n        }\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update document class for theme\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      partialize: (state) => ({\n        apiKey: state.apiKey,\n        baseURL: state.baseURL,\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize API client on rehydration if API key exists\n        if (state?.apiKey && !isClientInitialized()) {\n          initializeClient({\n            apiKey: state.apiKey,\n            baseURL: state.baseURL,\n          });\n        }\n        \n        // Apply theme on rehydration\n        if (state?.theme && typeof window !== 'undefined') {\n          document.documentElement.className = state.theme;\n        }\n      },\n    }\n  )\n);","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * For contributors:\n * - Always handle multiple API response formats\n * - Update currentAgent when agents list changes\n * - Use optimistic updates for better UX\n * - Log errors for debugging\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n\n      /**\n       * Fetch all agents from the API\n       * \n       * Behavior:\n       * - Shows loading state during fetch\n       * - Auto-selects first agent if none selected\n       * - Handles multiple API response formats\n       * - Clears error state on success\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getAgents();\n          \n          // Handle different response formats from the API\n          // API can return: { data: [...] }, [...], or { data: { data: [...] } }\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              agents = response as Agent[];\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              // Paginated response format\n              agents = (response as any).data.data;\n            }\n          }\n          \n          console.log('Fetched agents:', agents);\n          \n          set({ \n            agents, \n            loading: false,\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], // Ensure agents is always an array even on error\n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: (agent: Agent) => {\n        set({ currentAgent: agent });\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { are_licenses_allowed?: boolean }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n\n      fetchConversations: async (projectId: number) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getConversations(projectId);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              conversations = (response as any).data.data;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          set({ \n            conversations, \n            loading: false,\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation, conversations } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // Look for existing conversations for this project\n        const projectConversations = conversations.filter(c => c.project_id === projectId);\n        if (projectConversations.length > 0) {\n          const conversation = projectConversations[0];\n          set({ currentConversation: conversation });\n          return conversation;\n        }\n        \n        // Create new conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        currentConversation: state.currentConversation,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state && !Array.isArray(state.conversations)) {\n          state.conversations = [];\n        }\n      },\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * For contributors:\n * - Always update both local state and storage\n * - Handle API errors gracefully with fallbacks\n * - Use logger for debugging\n * - Maintain message order and IDs\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to save messages to local storage:', error);\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to load messages from local storage:', error);\n    return null;\n  }\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Check if in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      throw new Error('No agent selected');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      if (files && files.length > 0) {\n        const client = getClient();\n        await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50)\n      });\n      \n      try {\n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          { \n            prompt: content,\n            response_source: 'default',  // Required field as per API documentation\n            stream: 1  // Include stream parameter in body as per SDK examples\n          },\n          {\n            onChunk: (chunk) => {\n              logger.debug('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current) {\n                  set({\n                    streamingMessage: {\n                      ...current,\n                      citations: chunk.citations\n                    }\n                  });\n                }\n              }\n            },\n            onComplete: () => {\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                get().addMessage(conversation.id.toString(), finalMessage);\n              }\n              \n              set({ \n                streamingMessage: null,\n                isStreaming: false,\n              });\n            },\n            onError: async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: content,\n                    response_source: 'default',  // Required field as per API documentation\n                    stream: 0  // Explicitly disable streaming\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  finalMessage.citations = messageData?.citations || [];\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                console.error('Both streaming and fallback failed:', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: `Communication error: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`,\n                });\n              }\n            },\n          }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      console.error('Failed to send message:', error);\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: error instanceof Error ? error.message : 'Failed to send message',\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) return;\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) return;\n\n    try {\n      // Update local state immediately\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API (assuming we have the prompt ID)\n      // Note: This would need to be adjusted based on the actual API structure\n      // const client = getClient();\n      // await client.updateMessageFeedback(currentAgent.id, currentConversation.id, promptId, {\n      //   reaction: feedback === 'like' ? 'liked' : 'disliked'\n      // });\n    } catch (error) {\n      console.error('Failed to update message feedback:', error);\n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        messages.forEach(msg => {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: msg.citations || [],\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction || msg.feedback,\n            });\n          }\n        });\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, formattedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, formattedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { startDate, endDate } = get().dateRange;\n      \n      // Fetch all analytics data in parallel\n      const [conversations, queries, traffic, statistics, reports] = await Promise.all([\n        client.getConversationAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getQueryAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getTrafficAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n          period: 'day',\n        }),\n        client.getStatistics(projectId),\n        client.getAnalysisReport(projectId, 'weekly'),\n      ]);\n\n      // Transform the data to match our interface\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversations.data?.total || 0,\n          active: conversations.data?.active || 0,\n          trend: conversations.data?.trend || 0,\n          data: conversations.data?.timeline || [],\n        },\n        queries: {\n          total: queries.data?.total || 0,\n          successful: queries.data?.successful || 0,\n          failed: queries.data?.failed || 0,\n          avgResponseTime: queries.data?.avg_response_time || 0,\n          topQueries: queries.data?.top_queries || [],\n          data: queries.data?.timeline || [],\n        },\n        traffic: {\n          uniqueUsers: traffic.data?.unique_users || 0,\n          pageViews: traffic.data?.page_views || 0,\n          avgSessionDuration: traffic.data?.avg_session_duration || 0,\n          bounceRate: traffic.data?.bounce_rate || 0,\n          data: traffic.data?.timeline || [],\n        },\n        statistics: {\n          totalMessages: statistics.data?.total_messages || 0,\n          totalConversations: statistics.data?.total_conversations || 0,\n          avgMessagesPerConversation: statistics.data?.avg_messages_per_conversation || 0,\n          satisfactionRate: statistics.data?.satisfaction_rate || 0,\n          responseAccuracy: statistics.data?.response_accuracy || 0,\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error) {\n      console.error('Failed to fetch analytics:', error);\n      set({ \n        analytics: null,\n        error: error instanceof Error ? error.message : 'Failed to fetch analytics',\n        loading: false,\n      });\n      toast.error('Failed to fetch analytics data');\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse } from '@/types';\n\nexport interface ProjectSettings {\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  default_prompt?: string;\n  example_questions?: string[];\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_msg_lang?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  persona_instructions?: string;\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\nexport interface ProjectStats {\n  total_conversations: number;\n  total_messages: number;\n  total_sources: number;\n  total_pages: number;\n  last_activity: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectSettings>>(\n        `/projects/${projectId}/settings`\n      );\n\n      if (response.status === 200) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields\n            value.forEach((question, index) => {\n              formData.append(`example_questions[${index}]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().post<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/settings`,\n        formData\n      );\n\n      if (response.status === 200 && response.data.updated) {\n        // Merge updated settings with current settings\n        const currentSettings = get().settings || {};\n        const newSettings = { ...currentSettings, ...settingsUpdate };\n        \n        set({ \n          settings: newSettings, \n          settingsLoading: false \n        });\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectPlugin[]>>(\n        `/projects/${projectId}/plugins`\n      );\n\n      if (response.status === 200) {\n        set({ \n          plugins: Array.isArray(response.data) ? response.data : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().put<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/plugins/${pluginId}`,\n        { enabled }\n      );\n\n      if (response.status === 200) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectStats>>(\n        `/projects/${projectId}/stats`\n      );\n\n      if (response.status === 200) {\n        set({ \n          stats: response.data, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Temporarily disabled - sources are now managed directly in components using the API\n// This store will be removed or updated to match the new API structure\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Mock implementation to avoid breaking imports\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // const response = await client.getSources(projectId);\n      \n      const sources: Source[] = []; // Array.isArray(response.data) ? response.data : [];\n      set({ sources, loading: false });\n      throw new Error('Sources API integration needs update');\n    } catch (error) {\n      console.error('Failed to fetch sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      console.error('Failed to fetch source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      console.error('Failed to upload sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      console.error('Failed to update source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      console.error('Failed to delete sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      console.error('Failed to sync sources:', error);\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.get<CustomGPTResponse<UserProfile>>('/user');\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error) {\n          console.error('Failed to fetch profile:', error);\n          set({ \n            error: `Failed to fetch profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to load profile');\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.post<CustomGPTResponse<UserProfile>>('/user', formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error) {\n          console.error('Failed to update profile:', error);\n          set({ \n            error: `Failed to update profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to update profile');\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0,\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch licenses';\n      set({ \n        error: errorMessage,\n        loading: false,\n        licenses: []\n      });\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...',\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to create license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Customization for contributors:\n * - Add new variants in the buttonVariants object\n * - Modify colors to match brand guidelines\n * - Add loading state with spinner\n * - Implement button groups\n * - Add icon support with left/right positioning\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Base classes for all buttons\n  'inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',\n  {\n    variants: {\n      variant: {\n        default: 'bg-brand-500 text-white hover:bg-brand-600 shadow-sm',\n        destructive: 'bg-red-500 text-white hover:bg-red-600 shadow-sm',\n        outline: 'border border-gray-300 bg-white hover:bg-gray-50 text-gray-900',\n        secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200',\n        ghost: 'hover:bg-gray-100 text-gray-900',\n        link: 'text-brand-600 underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 py-2 px-4',\n        sm: 'h-8 px-3 text-xs',\n        lg: 'h-12 px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Customization for contributors:\n * - Add citation filtering\n * - Implement citation search\n * - Add export citations feature\n * - Enhance confidence visualization\n * - Add citation grouping by domain\n * - Implement citation tooltips\n * - Add citation copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n}) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden transition-all hover:border-gray-300\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-gray-900 line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-gray-500 line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-gray-400 transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-gray-100 bg-gray-50\">\n              <p className=\"text-sm text-gray-700 mb-2\">\n                {citation.content}\n              </p>\n              \n              {/* Confidence Score */}\n              {citation.confidence && (\n                <div className=\"mb-2\">\n                  <div className=\"flex items-center justify-between text-xs text-gray-500 mb-1\">\n                    <span>Relevance</span>\n                    <span>{Math.round(citation.confidence * 100)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                    <div \n                      className=\"bg-brand-500 h-1.5 rounded-full transition-all\"\n                      style={{ width: `${citation.confidence * 100}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps> = ({ \n  citations, \n  onCitationClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-gray-400\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { CitationList } from './CitationList';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-gray-800 text-white hover:bg-gray-700\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-gray-900 animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  return (\n    <div className=\"prose prose-sm max-w-none text-gray-900\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-gray-100 text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'like' && 'text-green-600 hover:text-green-700'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'dislike' && 'text-red-600 hover:text-red-700'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message, \n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-white' : 'bg-gray-50 border-y border-gray-100',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <div className=\"w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-white\" />\n            </div>\n          ) : (\n            <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center\">\n              <Bot className=\"w-4 h-4 text-brand-600\" />\n            </div>\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-gray-500\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-gray-900 whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-gray-400\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Square, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload } from '@/types';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n    >\n      <div className=\"text-gray-600\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-gray-900 truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-gray-500 flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-red-500 flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gray-200 rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-gray-300 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-gray-500\" />\n      </button>\n    </motion.div>\n  );\n};\n\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n}\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className=\"h-10 w-10 text-gray-600 hover:text-gray-800\"\n        title=\"Upload files\"\n      >\n        <Paperclip className=\"h-5 w-5\" />\n      </Button>\n    </>\n  );\n};\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className \n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => {\n        // In a real implementation, you'd have the actual File objects\n        // For now, we'll create mock File objects\n        return new File([''], f.name, { type: f.type });\n      });\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'border-t border-gray-200 bg-white px-4 py-3 relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        {/* File Upload Button */}\n        <FileUploadButton\n          onUpload={handleFileUpload}\n          disabled={disabled}\n        />\n        \n        {/* Text Input */}\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={1}\n            className={cn(\n              'w-full resize-none rounded-lg border border-gray-300',\n              'px-3 py-2 pr-12',\n              'focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'min-h-[44px] max-h-[200px]',\n              'placeholder:text-gray-500'\n            )}\n            style={{\n              height: 'auto',\n              overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n            }}\n          />\n          \n          {/* Character Count */}\n          {input.length > 0 && (\n            <div className=\"absolute bottom-2 right-2 text-xs text-gray-400 pointer-events-none\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        \n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!canSend}\n          className={cn(\n            'h-10 w-10 flex-shrink-0',\n            disabled && 'animate-pulse'\n          )}\n          title={disabled ? 'Stop generating' : 'Send message'}\n        >\n          {disabled ? (\n            <Square className=\"h-5 w-5\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </form>\n      \n      {/* Input Hints */}\n      <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n        <span>Supports {CONSTANTS.ACCEPTED_FILE_TYPES.length}+ file formats</span>\n      </div>\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Customization for contributors:\n * - Add different animation styles\n * - Implement custom messages (\"Thinking...\", \"Searching...\")\n * - Add progress indicator for long operations\n * - Customize avatar appearance\n * - Add sound effects option\n * - Implement skeleton loading alternative\n * - Add estimated time remaining\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-gray-50 border-y border-gray-100',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Customization for contributors:\n * - Add agent search/filter functionality\n * - Implement agent favorites/pinning\n * - Add agent creation shortcut\n * - Customize agent avatar display\n * - Add agent status indicators\n * - Implement agent grouping/categories\n * - Add keyboard navigation support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { useAgentStore } from '@/store';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <div className={cn(\n          'w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0',\n          isSelected ? 'bg-brand-600' : 'bg-gray-200'\n        )}>\n          <Bot className={cn(\n            'w-4 h-4',\n            isSelected ? 'text-white' : 'text-gray-600'\n          )} />\n        </div>\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-gray-900 truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Metadata */}\n          <div className=\"flex items-center gap-3 mt-1 text-xs text-gray-400\">\n            {agent.settings?.chatbot_model && (\n              <span>Model: {agent.settings.chatbot_model}</span>\n            )}\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    selectAgent \n  } = useAgentStore();\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = (agent: Agent) => {\n    selectAgent(agent);\n    setIsOpen(false);\n    toast.success(`Switched to ${agent.project_name}`);\n  };\n\n  /**\n   * Toggle dropdown and fetch agents\n   * \n   * When opening, automatically fetches latest agents.\n   * Errors are logged but not shown to avoid annoying toasts.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Fetch agents when opening the dropdown\n    if (willOpen) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        console.error('Failed to fetch agents:', error);\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-gray-100 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n            <Bot className=\"w-4 h-4 text-gray-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-gray-600 font-medium\">No agents available</p>\n            <p className=\"text-xs text-gray-500\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-white border rounded-lg text-left transition-colors',\n          'hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n          isOpen && 'ring-2 ring-brand-500 border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <div className=\"w-8 h-8 rounded-full bg-brand-600 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-4 h-4 text-white\" />\n            </div>\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-gray-900 truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-gray-400 transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-gray-500\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Customization for contributors:\n * - Add citation caching\n * - Implement citation sharing\n * - Add citation bookmarking\n * - Enhance image preview (zoom, gallery)\n * - Add citation analytics tracking\n * - Implement citation export\n * - Add related citations\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading citation</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className=\"space-y-4\">\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-gray-100\">\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Globe className=\"h-4 w-4\" />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-brand-600 transition-colors truncate\"\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700\">{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className=\"pt-4 border-t space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">Citation ID</span>\n                    <span className=\"font-mono text-gray-700\">#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Has preview image</span>\n                      <ImageIcon className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-brand-600 hover:text-brand-700 transition-colors\"\n                >\n                  Visit source\n                  <ExternalLink className=\"h-3.5 w-3.5\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId]);\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      alert(`Maximum conversation limit (${maxConversations}) reached`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      alert('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-gray-50',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-gray-400 hover:bg-gray-100 rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-gray-900 truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Modify EXAMPLE_PROMPTS for different starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { useMessageStore, useAgentStore, useConversationStore } from '@/store';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { ConversationManager } from './ConversationManager';\nimport { logger } from '@/lib/logger';\n\n/**\n * Example prompts shown to users when starting a new conversation\n * Customize these based on your agent's capabilities and use cases\n */\nconst EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\",\n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className=\"p-3 text-left bg-white border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-sm transition-all text-sm text-gray-700\"\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center h-full px-4 py-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center max-w-md\"\n      >\n        {/* Logo */}\n        <div className=\"w-16 h-16 rounded-full bg-brand-100 flex items-center justify-center mb-6 mx-auto\">\n          <Sparkles className=\"w-8 h-8 text-brand-600\" />\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className=\"text-gray-600 mb-8\">\n          I'm here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 w-full\">\n          {EXAMPLE_PROMPTS.map((prompt, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage \n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }, [conversationMessages, streamingMessage]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    // This would be handled by the message store\n    console.log('Message feedback:', messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-gray-50 to-white',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-800\">\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"font-medium\">\n              {error.includes('unauthorized') || error.includes('403') \n                ? 'Authorization Error' \n                : 'Error'}\n            </span>\n          </div>\n          <p className=\"text-red-700 mt-1 text-sm\">\n            {error.includes('unauthorized') || error.includes('403')\n              ? 'Your API key does not have permission to access this agent\\'s conversations. Please check your API key permissions or contact support.'\n              : error}\n          </p>\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation\n}) => {\n  const { currentAgent } = useAgentStore();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-gray-200 bg-white\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-gray-100\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-gray-900 truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-gray-500\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-gray-100 transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header\n  if (mode === 'standalone') {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-gray-900\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (typeof window !== 'undefined' && (window as any).CustomGPTWidget) {\n      const widget = (window as any).__customgpt_widget_instance;\n      if (widget) {\n        widget.switchConversation(conversation.id);\n      }\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (typeof window !== 'undefined' && (window as any).CustomGPTWidget) {\n      const widget = (window as any).__customgpt_widget_instance;\n      if (widget) {\n        const newConv = widget.createConversation();\n        setCurrentConversationId(newConv.id);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.debug('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, []); // Empty dependency array to run only once on mount\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n    console.log('Agent settings requested for:', agent.project_name);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-white',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-gray-200',\n        mode === 'floating' && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-gray-200',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n      />\n      <MessageArea className=\"flex-1\" />\n      <ChatInput\n        onSend={handleSendMessage}\n        disabled={isStreaming}\n        placeholder={isStreaming ? \"AI is thinking...\" : \"Send a message...\"}\n      />\n      \n      {/* Branding Footer */}\n      {(mode === 'widget' || mode === 'floating') && (\n        <div className=\"px-4 py-2 border-t border-gray-100 bg-gray-50\">\n          <a\n            href=\"https://customgpt.ai\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-gray-500 hover:text-gray-700 transition-colors block text-center\"\n          >\n            Powered by CustomGPT.ai\n          </a>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Customization for contributors:\n * - Add conversation categories/folders\n * - Implement bulk operations\n * - Add export/import functionality\n * - Customize sidebar width\n * - Add conversation pinning\n * - Implement conversation search\n * - Add conversation templates\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  RefreshCw,\n  Database,\n  BarChart3,\n  FileText,\n  Bug\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/store';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    onDelete(conversation.id.toString());\n    setShowMenu(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => !isEditing && onSelect(conversation)}\n    >\n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-gray-900 text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-gray-500\">\n            <Calendar className=\"w-3 h-3\" />\n            <span>{formatTimestamp(conversation.updated_at)}</span>\n            {conversation.message_count && (\n              <>\n                <span>•</span>\n                <span>{conversation.message_count} messages</span>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-32 bg-white border border-gray-200 rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      console.log('ConversationSidebar: Agent changed, fetching conversations for:', currentAgent.project_name, currentAgent.id);\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n      console.log('ConversationSidebar: No current agent selected');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Filter conversations based on search query\n  // Debug log to understand the conversations type\n  if (!Array.isArray(conversations)) {\n    console.warn('Conversations is not an array:', typeof conversations, conversations);\n  }\n  \n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter(conversation =>\n        conversation.name.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      console.error('Failed to create conversation:', error);\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      console.error('Failed to load messages for conversation:', error);\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className={cn('w-12 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-80 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-gray-900\">Conversations</h2>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"h-8 w-8\"\n            title=\"Collapse sidebar\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-9 pr-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          {isCreating ? 'Creating...' : 'New Chat'}\n        </Button>\n        \n        <div className=\"border-t border-gray-200 pt-2 mt-3 space-y-1\">\n          <Link href=\"/analytics\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n              Analytics\n            </Button>\n          </Link>\n          \n          <Link href=\"/pages\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Pages\n            </Button>\n          </Link>\n          \n          <Link href=\"/sources\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Database className=\"w-4 h-4\" />\n              Sources\n            </Button>\n          </Link>\n          \n          <Link href=\"/debug\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Bug className=\"w-4 h-4\" />\n              Debug Logs\n            </Button>\n          </Link>\n        </div>\n        \n        <Button\n          onClick={() => {\n            if (currentAgent) {\n              logger.info('UI', 'Manual refresh conversations clicked', {\n                agentId: currentAgent.id,\n                agentName: currentAgent.project_name\n              });\n              fetchConversations(currentAgent.id);\n            }\n          }}\n          disabled={!currentAgent || loading}\n          className=\"w-full justify-start gap-2\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <RefreshCw className={cn(\"w-4 h-4\", loading && \"animate-spin\")} />\n          Refresh Conversations\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                <div className=\"h-3 bg-gray-100 rounded w-3/4\" />\n              </div>\n            ))}\n          </div>\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-red-600 mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-500\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-gray-400 mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-red-500\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200 bg-white\">\n        <div className=\"text-xs text-gray-500 text-center\">\n          {filteredConversations.length} conversation{filteredConversations.length !== 1 ? 's' : ''}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Customization for contributors:\n * - Add new deployment modes in the mode prop\n * - Customize sidebar behavior and persistence\n * - Add keyboard shortcuts for sidebar toggle\n * - Implement mobile-responsive sidebar\n * - Add sidebar position options (left/right)\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { useConversationStore, useMessageStore } from '@/store';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { currentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentConversation && !isDemoMode) {\n      loadMessages(currentConversation.id.toString());\n    }\n  }, [currentConversation, loadMessages]);\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * For contributors: Consider persisting this state to localStorage\n   * to remember user preference across sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n      />\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-white\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n        />\n      </div>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../../app/globals.css';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\n\ninterface IframeConfig {\n  apiKey: string;\n  agentId: number | string;\n  mode: 'embedded' | 'floating' | 'widget';\n  theme: 'light' | 'dark';\n  enableCitations: boolean;\n  enableFeedback: boolean;\n}\n\nconst IframeApp: React.FC = () => {\n  const [config, setConfig] = useState<IframeConfig | null>(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const agentIdParam = urlParams.get('agentId');\n    \n    const iframeConfig: IframeConfig = {\n      apiKey: urlParams.get('apiKey') || '',\n      agentId: agentIdParam ? (isNaN(Number(agentIdParam)) ? agentIdParam : Number(agentIdParam)) : '',\n      mode: (urlParams.get('mode') as any) || 'embedded',\n      theme: (urlParams.get('theme') as any) || 'light',\n      enableCitations: urlParams.get('enableCitations') !== 'false',\n      enableFeedback: urlParams.get('enableFeedback') !== 'false',\n    };\n\n    if (!iframeConfig.apiKey) {\n      console.error('CustomGPT: API key is required');\n      return;\n    }\n    \n    if (!iframeConfig.agentId) {\n      console.error('CustomGPT: Agent ID is required');\n      return;\n    }\n\n    setConfig(iframeConfig);\n\n    // Set up the API key in the config store\n    useConfigStore.getState().setApiKey(iframeConfig.apiKey);\n    \n    // Set up the agent - create a minimal agent object with the provided ID\n    const agent: any = {\n      id: typeof iframeConfig.agentId === 'string' ? parseInt(iframeConfig.agentId) : iframeConfig.agentId,\n      project_name: `Agent ${iframeConfig.agentId}`,\n      is_chat_active: true,\n    };\n    useAgentStore.getState().selectAgent(agent);\n\n    // Set up message handling with parent window\n    setupMessageHandling();\n\n    // Notify parent that iframe is ready\n    postMessageToParent('ready', { config: iframeConfig });\n    setIsReady(true);\n  }, []);\n\n  const setupMessageHandling = () => {\n    window.addEventListener('message', (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'customgpt-open':\n          handleOpen();\n          break;\n        case 'customgpt-close':\n          handleClose();\n          break;\n        case 'customgpt-config-update':\n          handleConfigUpdate(data);\n          break;\n      }\n    });\n\n    // Handle window resize for responsive behavior\n    const handleResize = () => {\n      postMessageToParent('resize', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Send initial size\n    setTimeout(handleResize, 100);\n  };\n\n  const postMessageToParent = (type: string, data: any = {}) => {\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage({\n        type: `customgpt-${type}`,\n        data\n      }, '*');\n    }\n  };\n\n  const handleOpen = () => {\n    // Handle any iframe-specific open logic\n    console.log('Iframe opened');\n  };\n\n  const handleClose = () => {\n    // Handle any iframe-specific close logic\n    console.log('Iframe closed');\n    postMessageToParent('close');\n  };\n\n  const handleConfigUpdate = (newConfig: Partial<IframeConfig>) => {\n    if (config) {\n      const updatedConfig = { ...config, ...newConfig };\n      setConfig(updatedConfig);\n      \n      if (newConfig.apiKey) {\n        useConfigStore.getState().setApiKey(newConfig.apiKey);\n      }\n    }\n  };\n\n  const handleMessage = (message: any) => {\n    // Relay messages to parent window\n    postMessageToParent('message', message);\n  };\n\n  const handleError = (error: any) => {\n    // Relay errors to parent window\n    postMessageToParent('error', error);\n    console.error('Widget error:', error);\n  };\n\n  // Show loading state until config is available\n  if (!config || !isReady) {\n    return (\n      <div className=\"flex items-center justify-center h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading CustomGPT...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-50\">\n      <ChatLayout\n        mode=\"widget\"\n        showSidebar={false} // No sidebar in iframe mode\n        onClose={config.mode === 'floating' ? handleClose : undefined}\n      />\n      <Toaster \n        position=\"top-center\"\n        toastOptions={{\n          style: { zIndex: 10000 }\n        }}\n      />\n    </div>\n  );\n};\n\n// Initialize the app\nconst initIframeApp = () => {\n  const container = document.getElementById('iframe-app');\n  if (container) {\n    const root = createRoot(container);\n    root.render(<IframeApp />);\n  }\n};\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initIframeApp);\n} else {\n  initIframeApp();\n}\n\nexport default IframeApp;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t437: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcustomgpt_ui\"] = self[\"webpackChunkcustomgpt_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(4085)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","cn","inputs","twMerge","clsx","generateId","Math","random","toString","substring","Date","now","formatFileSize","bytes","i","floor","log","parseFloat","pow","toFixed","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","async","copyToClipboard","text","navigator","clipboard","writeText","error","parseStreamChunk","chunk","startsWith","slice","trim","type","data","parsed","JSON","parse","undefined","content","citations","message","delta","choices","jsonError","parseError","includes","delay","ms","Promise","resolve","setTimeout","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","Logger","constructor","_defineProperty","this","isClient","window","getInstance","instance","formatMessage","entry","level","category","stack","formatted","toUpperCase","stringify","writeToFile","toISOString","code","status","logs","push","length","split","sendToServer","fetch","method","headers","body","debug","info","warn","getLogs","clearLogs","apiRequest","endpoint","apiResponse","apiError","authCheck","authError","navigation","route","params","storeAction","store","action","logger","CustomGPTAPIClient","config","Map","apiKey","baseURL","timeout","retryAttempts","retryDelay","hasApiKey","apiKeyPreview","request","options","fetchOptions","url","URL","Object","entries","forEach","key","value","searchParams","append","FormData","requestOptions","fn","maxAttempts","baseDelay","lastError","attempt","delayTime","retryWithBackoff","abortController","AbortController","requestId","generateRequestId","abortControllers","set","timeoutId","abort","response","signal","clearTimeout","delete","ok","errorText","errorMessage","errorCode","errorData","enhancedMessage","getEnhancedErrorMessage","originalMessage","fromEntries","APIError","json","dataPreview","Error","name","streamRequest","streamOptions","onChunk","onComplete","onError","hasBody","bodyContent","contentType","get","isEventStream","reader","getReader","decoder","TextDecoder","buffer","hasReceivedData","done","read","decode","stream","lines","pop","line","fullLine","lineLength","hasContent","contentPreview","hasCitations","originalLine","releaseLock","cancelRequest","controller","cancelAllRequests","clear","getAgents","createAgent","formData","project_name","sitemap_path","files","file","index","is_shared","getAgent","id","updateAgent","are_licenses_allowed","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","isFormData","getConversations","projectId","enhancedParams","userFilter","createConversation","updateConversation","sessionId","deleteConversation","getMessages","lang","sendMessage","payload","prompt","response_source","custom_persona","chatbot_model","keys","sendMessageStream","hasCustomPersona","responseSource","streamParam","getMessageById","promptId","updateMessageFeedback","sendMessageOpenAIFormat","is_inline_citation","getCitation","citationId","uploadFile","getConversationAnalytics","queryParams","URLSearchParams","start_date","end_date","limit","getQueryAnalytics","getTrafficAnalytics","period","getStatistics","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","page","order","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","metadata","previewFile","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getUserLimits","getUserProfile","updateUserProfile","post","put","details","super","defaultClient","getClient","initializeClient","isClientInitialized","useConfigStore","create","persist","theme","setApiKey","setBaseURL","setTheme","document","documentElement","className","partialize","state","onRehydrateStorage","useAgentStore","agents","currentAgent","loading","fetchAgents","client","Array","isArray","newAgent","selectAgent","agent","setAgents","current","find","a","updatedAgent","map","filteredAgents","filter","useConversationStore","conversations","currentConversation","fetchConversations","responseType","hasData","dataLength","count","c","messagesCount","messages","errorType","newConversation","selectConversation","conversation","conversationId","project_id","session_id","updatedConversations","updatedConversation","ensureConversation","firstMessage","projectConversations","title","join","generateConversationName","getSessionId","__customgpt_session","sessionStorage","getItem","substr","setItem","e","StreamHandler","processStream","callbacks","currentMessage","isComplete","cancel","processLine","citation","onCitation","getCurrentMessage","isStreaming","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","size","has","cancelStream","handler","cancelAllStreams","getActiveStreams","from","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","stored","localStorage","cache","useMessageStore","streamingMessage","__customgpt_demo_mode","agentStore","getState","conversationStore","agentId","agentName","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","role","addMessage","assistantMessage","all","messageContent","contentLength","updateStreamingMessage","finalMessage","streamError","messageData","openai_response","fallbackError","setupError","String","newMessages","conversationMessages","existingIndex","findIndex","m","clearMessages","messageId","feedback","updatedMessage","getMessagesForConversation","cancelStreaming","loadMessages","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","created_at","user_query","response_feedback","reaction","formattedCount","cachedMessages","loadMessagesFromStorage","messageCount","formatDate","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","setFontSize","root","classList","remove","add","getDefaultDateRange","endDate","startDate","setDate","getDate","activeRequests","analytics","dateRange","fetchAnalytics","queries","traffic","statistics","reports","analyticsData","total","active","trend","timeline","successful","failed","avgResponseTime","avg_response_time","topQueries","top_queries","uniqueUsers","unique_users","pageViews","page_views","avgSessionDuration","avg_session_duration","bounceRate","bounce_rate","totalMessages","total_messages","totalConversations","total_conversations","avgMessagesPerConversation","avg_messages_per_conversation","satisfactionRate","satisfaction_rate","responseAccuracy","response_accuracy","toast","setDateRange","exportAnalytics","format","jsonData","blob","Blob","createObjectURL","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","success","reset","pages","paginationInfo","current_page","per_page","last_page","fetchPages","setQueryParams","sources","currentSource","searchQuery","sortBy","sortOrder","syncStatus","syncing","fetchSources","fetchSource","uploadSources","uploadPromises","reject","updateSource","updates","parseInt","source","bulkDelete","sourceIds","syncSources","progress","setSearchQuery","query","setFilter","selectSource","profile","fetchProfile","updateProfile","profilePhoto","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","updateSettings","settingsUpdate","question","File","updated","newSettings","fetchPlugins","updatePlugin","pluginId","enabled","plugin","fetchStats","licenses","fetchLicenses","dataType","fullResponse","l","errorStatus","fullError","dataStructure","licenseKey","newLicense","license","licenseName","updated_at","clearError","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","sm","lg","icon","defaultVariants","Button","React","asChild","props","ref","_jsx","displayName","CitationCard","isExpanded","onToggle","onClick","_jsxs","children","ChevronDown","AnimatePresence","motion","div","initial","height","opacity","animate","exit","transition","duration","confidence","round","style","width","target","rel","ExternalLink","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","hasMore","BookOpen","idx","y","newExpanded","toggleExpanded","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","StreamingCursor","MessageContent","ReactMarkdown","remarkPlugins","remarkGfm","components","match","exec","replace","MessageActions","onFeedback","setFeedback","handleFeedback","Copy","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","User","Bot","FileChip","onRemove","fileIcon","fileType","toLowerCase","getFileIcon","scale","_Fragment","AlertCircle","disabled","X","FileUploadButton","onUpload","fileInputRef","useRef","multiple","accept","onChange","handleClick","Paperclip","ChatInput","onSend","placeholder","maxLength","input","setInput","setFiles","isDragOver","setIsDragOver","textareaRef","adjustTextareaHeight","useCallback","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","some","prev","simulateUpload","setInterval","clearInterval","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","reduce","acc","maxSize","onDragEnter","onDragLeave","canSend","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Square","Send","TypingIndicator","AgentItem","isSelected","onSelect","onSettingsClick","Check","is_chat_active","stopPropagation","Settings","AgentSelector","showSettings","isOpen","setIsOpen","dropdownRef","useEffect","handleClickOutside","event","contains","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","imageError","setImageError","effectiveProjectId","fetchCitationDetails","hasImage","image","err","Loader","src","alt","Globe","description","ImageIcon","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","setConversations","editingId","setEditingId","editTitle","setEditTitle","setIsExpanded","loadConversations","handleEditSave","MessageCircle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","handleCreateConversation","alert","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","filtered","handleDelete","Trash2","EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","Sparkles","MessageArea","scrollRef","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","scrollTo","top","behavior","handleCitationClick","citationIndex","citationTitle","fillRule","clipRule","handleMessageFeedback","ChatHeader","mode","onAgentSettings","enableConversationManagement","ChatContainer","threadId","onMessage","setCurrentConversationId","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","CustomGPTWidget","widget","__customgpt_widget_instance","switchConversation","newConv","fileCount","isAuthError","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","inputRef","menuRef","select","handleSaveEdit","onBlur","Calendar","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","isCreating","setIsCreating","isDemoMode","isActive","filteredConversations","conversationName","handleRenameConversation","newName","MessageSquare","Search","Link","BarChart3","FileText","Database","Bug","handleDeleteConversation","_","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","handleToggleSidebar","IframeApp","setConfig","isReady","setIsReady","urlParams","location","search","agentIdParam","iframeConfig","isNaN","Number","enableCitations","enableFeedback","setupMessageHandling","postMessageToParent","handleOpen","handleClose","handleConfigUpdate","handleResize","innerWidth","innerHeight","parent","postMessage","newConfig","updatedConfig","Toaster","position","toastOptions","zIndex","initIframeApp","container","getElementById","createRoot","render","readyState","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","O","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}
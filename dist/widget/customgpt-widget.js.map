{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationList.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationManager.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Customization for contributors:\n * - Add new variants in the buttonVariants object\n * - Modify colors to match brand guidelines\n * - Add loading state with spinner\n * - Implement button groups\n * - Add icon support with left/right positioning\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Base classes for all buttons\n  'inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',\n  {\n    variants: {\n      variant: {\n        default: 'bg-brand-500 text-white hover:bg-brand-600 shadow-sm',\n        destructive: 'bg-red-500 text-white hover:bg-red-600 shadow-sm',\n        outline: 'border border-gray-300 bg-white hover:bg-gray-50 text-gray-900',\n        secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200',\n        ghost: 'hover:bg-gray-100 text-gray-900',\n        link: 'text-brand-600 underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 py-2 px-4',\n        sm: 'h-8 px-3 text-xs',\n        lg: 'h-12 px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Customization for contributors:\n * - Add citation filtering\n * - Implement citation search\n * - Add export citations feature\n * - Enhance confidence visualization\n * - Add citation grouping by domain\n * - Implement citation tooltips\n * - Add citation copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n}) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden transition-all hover:border-gray-300\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-gray-900 line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-gray-500 line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-gray-400 transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-gray-100 bg-gray-50\">\n              <p className=\"text-sm text-gray-700 mb-2\">\n                {citation.content}\n              </p>\n              \n              {/* Confidence Score */}\n              {citation.confidence && (\n                <div className=\"mb-2\">\n                  <div className=\"flex items-center justify-between text-xs text-gray-500 mb-1\">\n                    <span>Relevance</span>\n                    <span>{Math.round(citation.confidence * 100)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                    <div \n                      className=\"bg-brand-500 h-1.5 rounded-full transition-all\"\n                      style={{ width: `${citation.confidence * 100}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps> = ({ \n  citations, \n  onCitationClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-gray-400\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { CitationList } from './CitationList';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-gray-800 text-white hover:bg-gray-700\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-gray-900 animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  return (\n    <div className=\"prose prose-sm max-w-none text-gray-900\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-gray-100 text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'like' && 'text-green-600 hover:text-green-700'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'dislike' && 'text-red-600 hover:text-red-700'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message, \n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-white' : 'bg-gray-50 border-y border-gray-100',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <div className=\"w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-white\" />\n            </div>\n          ) : (\n            <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center\">\n              <Bot className=\"w-4 h-4 text-brand-600\" />\n            </div>\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-gray-500\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-gray-900 whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-gray-400\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Square, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload } from '@/types';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n    >\n      <div className=\"text-gray-600\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-gray-900 truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-gray-500 flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-red-500 flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gray-200 rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-gray-300 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-gray-500\" />\n      </button>\n    </motion.div>\n  );\n};\n\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n}\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className=\"h-10 w-10 text-gray-600 hover:text-gray-800\"\n        title=\"Upload files\"\n      >\n        <Paperclip className=\"h-5 w-5\" />\n      </Button>\n    </>\n  );\n};\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className \n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'border-t border-gray-200 bg-white px-4 py-3 relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        {/* File Upload Button */}\n        <FileUploadButton\n          onUpload={handleFileUpload}\n          disabled={disabled}\n        />\n        \n        {/* Text Input */}\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={1}\n            className={cn(\n              'w-full resize-none rounded-lg border border-gray-300',\n              'px-3 py-2 pr-12',\n              'focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'min-h-[44px] max-h-[200px]',\n              'placeholder:text-gray-500'\n            )}\n            style={{\n              height: 'auto',\n              overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n            }}\n          />\n          \n          {/* Character Count */}\n          {input.length > 0 && (\n            <div className=\"absolute bottom-2 right-2 text-xs text-gray-400 pointer-events-none\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        \n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!canSend}\n          className={cn(\n            'h-10 w-10 flex-shrink-0',\n            disabled && 'animate-pulse'\n          )}\n          title={disabled ? 'Stop generating' : 'Send message'}\n        >\n          {disabled ? (\n            <Square className=\"h-5 w-5\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </form>\n      \n      {/* Input Hints */}\n      <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n        <span>Supports {CONSTANTS.ACCEPTED_FILE_TYPES.length}+ file formats</span>\n      </div>\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Customization for contributors:\n * - Add different animation styles\n * - Implement custom messages (\"Thinking...\", \"Searching...\")\n * - Add progress indicator for long operations\n * - Customize avatar appearance\n * - Add sound effects option\n * - Implement skeleton loading alternative\n * - Add estimated time remaining\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-gray-50 border-y border-gray-100',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Customization for contributors:\n * - Add agent search/filter functionality\n * - Implement agent favorites/pinning\n * - Add agent creation shortcut\n * - Customize agent avatar display\n * - Add agent status indicators\n * - Implement agent grouping/categories\n * - Add keyboard navigation support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { useAgentStore } from '@/store';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <div className={cn(\n          'w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0',\n          isSelected ? 'bg-brand-600' : 'bg-gray-200'\n        )}>\n          <Bot className={cn(\n            'w-4 h-4',\n            isSelected ? 'text-white' : 'text-gray-600'\n          )} />\n        </div>\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-gray-900 truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Metadata */}\n          <div className=\"flex items-center gap-3 mt-1 text-xs text-gray-400\">\n            {agent.settings?.chatbot_model && (\n              <span>Model: {agent.settings.chatbot_model}</span>\n            )}\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    selectAgent \n  } = useAgentStore();\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = (agent: Agent) => {\n    selectAgent(agent);\n    setIsOpen(false);\n    toast.success(`Switched to ${agent.project_name}`);\n  };\n\n  /**\n   * Toggle dropdown and fetch agents\n   * \n   * When opening, automatically fetches latest agents.\n   * Errors are logged but not shown to avoid annoying toasts.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Fetch agents when opening the dropdown\n    if (willOpen) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        console.error('Failed to fetch agents:', error);\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-gray-100 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n            <Bot className=\"w-4 h-4 text-gray-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-gray-600 font-medium\">No agents available</p>\n            <p className=\"text-xs text-gray-500\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-white border rounded-lg text-left transition-colors',\n          'hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n          isOpen && 'ring-2 ring-brand-500 border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <div className=\"w-8 h-8 rounded-full bg-brand-600 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-4 h-4 text-white\" />\n            </div>\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-gray-900 truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-gray-400 transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-gray-500\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Customization for contributors:\n * - Add citation caching\n * - Implement citation sharing\n * - Add citation bookmarking\n * - Enhance image preview (zoom, gallery)\n * - Add citation analytics tracking\n * - Implement citation export\n * - Add related citations\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading citation</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className=\"space-y-4\">\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-gray-100\">\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Globe className=\"h-4 w-4\" />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-brand-600 transition-colors truncate\"\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700\">{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className=\"pt-4 border-t space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">Citation ID</span>\n                    <span className=\"font-mono text-gray-700\">#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Has preview image</span>\n                      <ImageIcon className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-brand-600 hover:text-brand-700 transition-colors\"\n                >\n                  Visit source\n                  <ExternalLink className=\"h-3.5 w-3.5\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-gray-50',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-gray-400 hover:bg-gray-100 rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-gray-900 truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Modify EXAMPLE_PROMPTS for different starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { useMessageStore, useAgentStore, useConversationStore } from '@/store';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { ConversationManager } from './ConversationManager';\nimport { logger } from '@/lib/logger';\n\n/**\n * Example prompts shown to users when starting a new conversation\n * Customize these based on your agent's capabilities and use cases\n */\nconst EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\",\n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className=\"p-3 text-left bg-white border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-sm transition-all text-sm text-gray-700\"\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center h-full px-4 py-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center max-w-md\"\n      >\n        {/* Logo */}\n        <div className=\"w-16 h-16 rounded-full bg-brand-100 flex items-center justify-center mb-6 mx-auto\">\n          <Sparkles className=\"w-8 h-8 text-brand-600\" />\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className=\"text-gray-600 mb-8\">\n          I'm here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 w-full\">\n          {EXAMPLE_PROMPTS.map((prompt, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage \n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }, [conversationMessages, streamingMessage]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    // This would be handled by the message store\n    console.log('Message feedback:', messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-gray-50 to-white',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-800\">\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"font-medium\">\n              {error.includes('unauthorized') || error.includes('403') \n                ? 'Authorization Error' \n                : 'Error'}\n            </span>\n          </div>\n          <p className=\"text-red-700 mt-1 text-sm\">\n            {error.includes('unauthorized') || error.includes('403')\n              ? 'Your API key does not have permission to access this agent\\'s conversations. Please check your API key permissions or contact support.'\n              : error}\n          </p>\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-gray-200 bg-white\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-gray-100\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-gray-900 truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-gray-500\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-gray-100 transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header\n  if (mode === 'standalone') {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-gray-900\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (typeof window !== 'undefined' && (window as any).CustomGPTWidget) {\n      const widget = (window as any).__customgpt_widget_instance;\n      if (widget) {\n        widget.switchConversation(conversation.id);\n      }\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (typeof window !== 'undefined' && (window as any).CustomGPTWidget) {\n      const widget = (window as any).__customgpt_widget_instance;\n      if (widget) {\n        const newConv = widget.createConversation();\n        if (newConv) {\n          setCurrentConversationId(newConv.id);\n        } else {\n          // Show user-friendly message when conversation limit is reached\n          const maxConversations = widget.configuration?.maxConversations || 5;\n          toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n        }\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.debug('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, []); // Empty dependency array to run only once on mount\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n    console.log('Agent settings requested for:', agent.project_name);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-white',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-gray-200',\n        mode === 'floating' && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-gray-200',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1\" />\n      <ChatInput\n        onSend={handleSendMessage}\n        disabled={isStreaming}\n        placeholder={isStreaming ? \"AI is thinking...\" : \"Send a message...\"}\n      />\n      \n      {/* Branding Footer */}\n      {(mode === 'widget' || mode === 'floating') && (\n        <div className=\"px-4 py-2 border-t border-gray-100 bg-gray-50\">\n          <a\n            href=\"https://customgpt.ai\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-gray-500 hover:text-gray-700 transition-colors block text-center\"\n          >\n            Powered by CustomGPT.ai\n          </a>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Customization for contributors:\n * - Add conversation categories/folders\n * - Implement bulk operations\n * - Add export/import functionality\n * - Customize sidebar width\n * - Add conversation pinning\n * - Implement conversation search\n * - Add conversation templates\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  RefreshCw,\n  Database,\n  BarChart3,\n  FileText,\n  Bug\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/store';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    onDelete(conversation.id.toString());\n    setShowMenu(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => !isEditing && onSelect(conversation)}\n    >\n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-gray-900 text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-gray-500\">\n            <Calendar className=\"w-3 h-3\" />\n            <span>{formatTimestamp(conversation.updated_at)}</span>\n            {conversation.message_count && (\n              <>\n                <span>•</span>\n                <span>{conversation.message_count} messages</span>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-32 bg-white border border-gray-200 rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      console.log('ConversationSidebar: Agent changed, fetching conversations for:', currentAgent.project_name, currentAgent.id);\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n      console.log('ConversationSidebar: No current agent selected');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Filter conversations based on search query\n  // Debug log to understand the conversations type\n  if (!Array.isArray(conversations)) {\n    console.warn('Conversations is not an array:', typeof conversations, conversations);\n  }\n  \n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter(conversation =>\n        conversation.name.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      console.error('Failed to create conversation:', error);\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      console.error('Failed to load messages for conversation:', error);\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className={cn('w-12 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-80 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-gray-900\">Conversations</h2>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"h-8 w-8\"\n            title=\"Collapse sidebar\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-9 pr-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          {isCreating ? 'Creating...' : 'New Chat'}\n        </Button>\n        \n        <div className=\"border-t border-gray-200 pt-2 mt-3 space-y-1\">\n          <Link href=\"/analytics\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n              Analytics\n            </Button>\n          </Link>\n          \n          <Link href=\"/pages\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Pages\n            </Button>\n          </Link>\n          \n          <Link href=\"/sources\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Database className=\"w-4 h-4\" />\n              Sources\n            </Button>\n          </Link>\n          \n          <Link href=\"/debug\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Bug className=\"w-4 h-4\" />\n              Debug Logs\n            </Button>\n          </Link>\n        </div>\n        \n        <Button\n          onClick={() => {\n            if (currentAgent) {\n              logger.info('UI', 'Manual refresh conversations clicked', {\n                agentId: currentAgent.id,\n                agentName: currentAgent.project_name\n              });\n              fetchConversations(currentAgent.id);\n            }\n          }}\n          disabled={!currentAgent || loading}\n          className=\"w-full justify-start gap-2\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <RefreshCw className={cn(\"w-4 h-4\", loading && \"animate-spin\")} />\n          Refresh Conversations\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                <div className=\"h-3 bg-gray-100 rounded w-3/4\" />\n              </div>\n            ))}\n          </div>\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-red-600 mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-500\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-gray-400 mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-red-500\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200 bg-white\">\n        <div className=\"text-xs text-gray-500 text-center\">\n          {filteredConversations.length} conversation{filteredConversations.length !== 1 ? 's' : ''}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Customization for contributors:\n * - Add new deployment modes in the mode prop\n * - Customize sidebar behavior and persistence\n * - Add keyboard shortcuts for sidebar toggle\n * - Implement mobile-responsive sidebar\n * - Add sidebar position options (left/right)\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { useConversationStore, useMessageStore } from '@/store';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * For contributors: Consider persisting this state to localStorage\n   * to remember user preference across sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-white\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n        />\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig } from '../types';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property apiKey - Required: Your CustomGPT API key\n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties\n  apiKey: string;\n  agentId: number | string;\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * \n * @example\n * // Basic embedded widget\n * const widget = CustomGPTWidget.init({\n *   apiKey: 'your-api-key',\n *   agentId: '123',\n *   containerId: 'chat-container'\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   apiKey: 'your-api-key',\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  private sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    if (!config.apiKey) {\n      throw new Error('CustomGPT Widget: API key is required');\n    }\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false,\n      ...config,\n    };\n\n    // Initialize session ID\n    // If isolateConversations is true, ensure each widget has a unique session\n    if (this.config.isolateConversations !== false) {\n      // Default to isolated conversations - each widget gets its own session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // Also store as the expected key for ChatContainer\n      (window as any).__customgpt_widget_instance = this;\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Set up the API key in the config store\n    useConfigStore.getState().setApiKey(this.config.apiKey);\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = this.config.apiKey === 'demo-api-key' || \n                      this.config.apiKey.startsWith('demo-') || \n                      this.config.apiKey.startsWith('test-');\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Fetch the actual agent details\n    const agentId = typeof this.config.agentId === 'string' ? parseInt(this.config.agentId) : this.config.agentId;\n    \n    if (!isDemoMode) {\n      try {\n        // Try to fetch agent details to get the project name\n        const client = getClient();\n        const agentsResponse = await client.getAgents();\n        const agents = Array.isArray(agentsResponse) ? agentsResponse : (agentsResponse as any).data || [];\n        const agent = agents.find((a: any) => a.id === agentId);\n        \n        if (agent) {\n          // Use custom agent name if provided\n          if (this.config.agentName) {\n            agent.project_name = this.config.agentName;\n          }\n          \n          // Use the actual agent with proper project name\n          useAgentStore.getState().selectAgent(agent);\n          // Clear other agents to ensure only this one is available\n          useAgentStore.getState().setAgents([agent]);\n        } else {\n          // Fallback if agent not found\n          const fallbackAgent: any = {\n            id: agentId,\n            project_name: this.config.agentName || `Project ${agentId}`,\n            is_chat_active: true,\n          };\n          useAgentStore.getState().selectAgent(fallbackAgent);\n          useAgentStore.getState().setAgents([fallbackAgent]);\n        }\n      } catch (error) {\n        // Use fallback on error\n        const fallbackAgent: any = {\n          id: agentId,\n          project_name: this.config.agentName || `Project ${agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(fallbackAgent);\n        useAgentStore.getState().setAgents([fallbackAgent]);\n      }\n    } else {\n      // For demo mode, always use fallback agent\n      const fallbackAgent: any = {\n        id: agentId,\n        project_name: this.config.agentName || `Demo Assistant`,\n        is_chat_active: true,\n      };\n      useAgentStore.getState().selectAgent(fallbackAgent);\n      useAgentStore.getState().setAgents([fallbackAgent]);\n    }\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // Render the widget first\n    this.render();\n    \n    // Initialize conversation after render to ensure ConversationManager is mounted\n    if (this.config.enableConversationManagement) {\n      const conversations = this.getConversations();\n      \n      if (conversations.length === 0) {\n        // Create initial conversation after a small delay to ensure components are mounted\n        setTimeout(() => {\n          this.createConversation('New Chat');\n        }, 100);\n      } else {\n        // Set current conversation to the first one\n        this.currentConversationId = conversations[0].id;\n        \n        // Only sync with global store if explicitly not isolated\n        if (this.config.isolateConversations === false && typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          const currentConv = conversations[0];\n          const fullConversation = {\n            ...currentConv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: currentConv.title\n          };\n          \n          // Set only the current conversation\n          useConversationStore.setState({\n            conversations: [fullConversation as any],\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // Update the global reference to current widget instance\n      if (typeof window !== 'undefined') {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n          <ChatLayout\n            mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n            onClose={this.config.mode === 'floating' ? handleClose : undefined}\n            showSidebar={false} // Disable sidebar for widget mode\n            className=\"w-full h-full\"\n            // Pass conversation management configuration\n            enableConversationManagement={this.config.enableConversationManagement}\n            maxConversations={this.config.maxConversations}\n            sessionId={this.sessionId}\n            threadId={currentConvId} // Pass current conversation ID\n            onConversationChange={this.config.onConversationChange}\n            onMessage={this.config.onMessage}\n            // Pass widget instance for isolated conversation management\n            widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n            // Pass current conversations for isolated mode\n            conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n            currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n              this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n            // Pass refresh key to trigger ConversationManager updates\n            conversationRefreshKey={this.conversationRefreshKey}\n          />\n          <Toaster \n            position=\"top-center\" \n            toastOptions={{\n              style: { zIndex: 10000 }\n            }}\n          />\n        </div>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public createConversation(title?: string): any {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      // Add required fields for conversation store compatibility\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Don't update the global store if we're in isolated mode\n    if (!this.config.isolateConversations) {\n      // Only update global store if sharing conversations\n      if (typeof window !== 'undefined') {\n        const { useConversationStore, useMessageStore } = require('../store');\n        const messageStore = useMessageStore.getState();\n        \n        // Get all widget conversations (local storage)\n        const allWidgetConversations = this.getConversations();\n        \n        // Convert all widget conversations to store format\n        const storeConversations = allWidgetConversations.map(conv => ({\n          ...conv,\n          project_id: parseInt(this.config.agentId as string) || 0,\n          session_id: this.sessionId,\n          name: conv.title\n        }));\n        \n        // Update store with all widget conversations, with new one as current\n        useConversationStore.setState({\n          conversations: storeConversations as any,\n          currentConversation: newConversation as any\n        });\n        \n        // Clear any existing messages for this conversation ID to ensure welcome message shows\n        messageStore.clearMessages(newConversation.id);\n      }\n    }\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation();\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    this.container = null;\n    this.root = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","/**\n * CustomGPT API Client\n * \n * Central API client for all CustomGPT.ai backend communication.\n * This client handles:\n * - Authentication via API key\n * - Request/response formatting\n * - Error handling and retries\n * - Streaming responses for real-time chat\n * - File uploads for agent training\n * \n * Architecture:\n * - Uses native fetch API\n * - Supports both REST and streaming endpoints\n * - Implements exponential backoff for retries\n * - Manages abort controllers for cancellation\n * \n * Key Features:\n * - Type-safe API methods\n * - Automatic retry with backoff\n * - Request timeout handling\n * - Stream parsing for chat responses\n * - Comprehensive error logging\n * \n * For contributors:\n * - All API methods should be type-safe\n * - Handle both successful and error responses\n * - Use logger for debugging\n * - Support request cancellation\n * - Document any API quirks or workarounds\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff, delay } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n/**\n * User profile API response format\n */\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * Configuration options for the API client\n */\nexport interface CustomGPTClientConfig {\n  /** CustomGPT.ai API key for authentication */\n  apiKey: string;\n  /** Base URL for API calls (defaults to production) */\n  baseURL?: string;\n  /** Request timeout in milliseconds (default: 30000) */\n  timeout?: number;\n  /** Number of retry attempts for failed requests (default: 3) */\n  retryAttempts?: number;\n  /** Delay between retries in milliseconds (default: 1000) */\n  retryDelay?: number;\n}\n\n/**\n * Extended fetch options with additional features\n */\nexport interface RequestOptions extends RequestInit {\n  /** Request timeout override */\n  timeout?: number;\n  /** Retry attempts override */\n  retryAttempts?: number;\n  /** Query parameters to append to URL */\n  params?: Record<string, string | number | boolean>;\n}\n\n/**\n * Options for handling streaming responses\n */\nexport interface StreamOptions {\n  /** Called for each chunk of streaming data */\n  onChunk?: (chunk: StreamChunk) => void;\n  /** Called when streaming completes successfully */\n  onComplete?: () => void;\n  /** Called if streaming encounters an error */\n  onError?: (error: Error) => void;\n  /** Timeout for the stream */\n  timeout?: number;\n}\n\n/**\n * Main API client class\n * \n * Usage:\n * ```typescript\n * const client = new CustomGPTAPIClient({\n *   apiKey: 'your-api-key',\n *   baseURL: 'https://app.customgpt.ai/api/v1'\n * });\n * \n * // Get agents\n * const agents = await client.getAgents();\n * \n * // Send message with streaming\n * await client.sendMessageStream(agentId, sessionId, message, {\n *   onChunk: (chunk) => console.log(chunk),\n *   onComplete: () => console.log('Done')\n * });\n * ```\n */\nexport class CustomGPTAPIClient {\n  private baseURL: string;\n  private apiKey: string;\n  private timeout: number;\n  private retryAttempts: number;\n  private retryDelay: number;\n  /** Map of request IDs to abort controllers for cancellation */\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor(config: CustomGPTClientConfig) {\n    this.apiKey = config.apiKey;\n    this.baseURL = config.baseURL || 'https://app.customgpt.ai/api/v1';\n    this.timeout = config.timeout || 30000;\n    this.retryAttempts = config.retryAttempts || 3;\n    this.retryDelay = config.retryDelay || 1000;\n    \n    // Log initialization for debugging\n    logger.info('API_CLIENT', 'CustomGPT API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      hasApiKey: !!this.apiKey,\n      apiKeyPreview: this.apiKey ? `${this.apiKey.substring(0, 10)}...` : 'none'\n    });\n  }\n\n  /**\n   * Generic request method with retry logic and error handling\n   * \n   * Features:\n   * - Automatic retry with exponential backoff\n   * - Request timeout handling\n   * - Proper error messages for debugging\n   * - Request cancellation support\n   * \n   * @param endpoint - API endpoint path (e.g., '/projects')\n   * @param options - Request options including method, body, etc.\n   * @returns Promise resolving to the API response\n   * @throws Error if request fails after all retries\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestOptions = {}\n  ): Promise<T> {\n    const {\n      timeout = this.timeout,\n      retryAttempts = this.retryAttempts,\n      params,\n      ...fetchOptions\n    } = options;\n\n    // Build URL with query parameters\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const headers: Record<string, string> = {\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Accept': 'application/json',\n      ...(fetchOptions.headers as Record<string, string>),\n    };\n\n    // Only set Content-Type if body is not FormData\n    if (!(fetchOptions.body instanceof FormData)) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const requestOptions: RequestInit = {\n      ...fetchOptions,\n      headers,\n    };\n\n    // Log the request\n    logger.apiRequest(endpoint, fetchOptions.method || 'GET', {\n      url: url.toString(),\n      headers: {\n        ...headers,\n        'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...` // Mask API key\n      },\n      body: fetchOptions.body ? \n        (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') \n        : undefined\n    });\n\n    return retryWithBackoff(\n      async () => {\n        const abortController = new AbortController();\n        const requestId = this.generateRequestId();\n        this.abortControllers.set(requestId, abortController);\n\n        // Set timeout\n        const timeoutId = setTimeout(() => {\n          abortController.abort();\n        }, timeout);\n\n        try {\n          const response = await fetch(url.toString(), {\n            ...requestOptions,\n            signal: abortController.signal,\n          });\n\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            let errorMessage: string;\n            let errorCode: string | undefined;\n            \n            try {\n              const errorData = JSON.parse(errorText);\n              // Handle both direct error format and nested data format\n              if (errorData.data && errorData.data.code && errorData.data.message) {\n                errorMessage = errorData.data.message;\n                errorCode = errorData.data.code.toString();\n              } else {\n                errorMessage = errorData.message || errorData.error || 'Unknown error';\n                errorCode = errorData.code?.toString();\n              }\n            } catch {\n              errorMessage = errorText || `HTTP ${response.status}`;\n            }\n\n            // Enhance error messages based on status codes and API documentation\n            const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n            logger.apiError(endpoint, {\n              status: response.status,\n              message: enhancedMessage,\n              originalMessage: errorMessage,\n              errorCode,\n              headers: Object.fromEntries(response.headers.entries())\n            });\n\n            throw new APIError(response.status, enhancedMessage, errorCode);\n          }\n\n          const data = await response.json();\n          \n          logger.apiResponse(endpoint, response.status, {\n            headers: Object.fromEntries(response.headers.entries()),\n            dataPreview: JSON.stringify(data).substring(0, 200) + '...'\n          });\n\n          return data;\n        } catch (error) {\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n          \n          if (error instanceof APIError) {\n            throw error;\n          }\n          \n          if (error instanceof Error && error.name === 'AbortError') {\n            throw new APIError(408, 'Request timeout');\n          }\n          \n          throw new APIError(0, error instanceof Error ? error.message : 'Network error');\n        }\n      },\n      retryAttempts,\n      this.retryDelay\n    );\n  }\n\n  /**\n   * Streaming request method for real-time responses\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestOptions = {},\n    streamOptions: StreamOptions = {}\n  ): Promise<void> {\n    const {\n      timeout = 60000, // Longer timeout for streaming\n      params,\n      ...fetchOptions\n    } = options;\n\n    const { onChunk, onComplete, onError } = streamOptions;\n    \n    logger.info('API_CLIENT', 'Starting stream request', {\n      endpoint,\n      method: options.method || 'GET',\n      hasBody: !!fetchOptions.body,\n      bodyContent: fetchOptions.body ? (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') : undefined\n    });\n\n    // Build URL with stream parameter - CustomGPT requires stream=1 in query params\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    url.searchParams.append('stream', '1');\n    url.searchParams.append('lang', 'en'); // Add required lang parameter\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const abortController = new AbortController();\n    const requestId = this.generateRequestId();\n    this.abortControllers.set(requestId, abortController);\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      abortController.abort();\n    }, timeout);\n\n    try {\n      logger.apiRequest(endpoint, fetchOptions.method || 'POST', {\n        url: url.toString(),\n        headers: {\n          'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: fetchOptions.body ? JSON.parse(fetchOptions.body as string) : undefined\n      });\n      \n      const response = await fetch(url.toString(), {\n        ...fetchOptions,\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n          ...fetchOptions.headers,\n        },\n        signal: abortController.signal,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        let errorCode: string | undefined;\n        \n        try {\n          const errorData = JSON.parse(errorText);\n          // Handle both direct error format and nested data format\n          if (errorData.data && errorData.data.code && errorData.data.message) {\n            errorMessage = errorData.data.message;\n            errorCode = errorData.data.code.toString();\n          } else {\n            errorMessage = errorData.message || errorData.error || 'Unknown error';\n            errorCode = errorData.code?.toString();\n          }\n        } catch {\n          errorMessage = errorText || `HTTP ${response.status}`;\n        }\n\n        // Enhance error messages\n        const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n        logger.apiError(endpoint, {\n          status: response.status,\n          message: enhancedMessage,\n          originalMessage: errorMessage,\n          errorCode,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n        \n        throw new APIError(response.status, enhancedMessage, errorCode);\n      }\n      \n      logger.apiResponse(endpoint, response.status, {\n        headers: Object.fromEntries(response.headers.entries()),\n        contentType: response.headers.get('content-type'),\n        isEventStream: response.headers.get('content-type')?.includes('text/event-stream')\n      });\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new APIError(500, 'No response body');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      try {\n        let hasReceivedData = false;\n        \n        while (true) {\n          const { done, value } = await reader.read();\n          \n          if (done) {\n            logger.info('STREAM', 'Stream ended', { hasReceivedData });\n            \n            // If we haven't received any data, this might indicate an issue\n            if (!hasReceivedData) {\n              logger.warn('STREAM', 'Stream ended without receiving any data - possible API issue');\n              onError?.(new Error('No data received from stream - the API may not support streaming or there was a connection issue'));\n              return;\n            }\n            \n            onComplete?.();\n            break;\n          }\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n          for (const line of lines) {\n            if (line.trim()) {\n              hasReceivedData = true;\n              \n              logger.debug('STREAM', 'Raw SSE line received', { \n                line: line.substring(0, 200),\n                fullLine: line,\n                lineLength: line.length \n              });\n              \n              const chunk = parseStreamChunk(line);\n              if (chunk) {\n                logger.debug('STREAM', 'Successfully parsed chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentPreview: chunk.content?.substring(0, 100),\n                  hasCitations: !!chunk.citations\n                });\n                \n                if (chunk.type === 'done') {\n                  logger.info('STREAM', 'Stream completed with done signal');\n                  onComplete?.();\n                  return;\n                } else if (chunk.type === 'error') {\n                  logger.error('STREAM', 'Stream error received', { error: chunk.error });\n                  onError?.(new Error(chunk.error || 'Stream error'));\n                  return;\n                } else {\n                  onChunk?.(chunk);\n                }\n              } else {\n                logger.warn('STREAM', 'Failed to parse chunk or chunk was null', { \n                  originalLine: line.substring(0, 200) \n                });\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      if (error instanceof APIError) {\n        onError?.(error);\n      } else if (error instanceof Error && error.name === 'AbortError') {\n        onError?.(new APIError(408, 'Request timeout'));\n      } else {\n        onError?.(new APIError(0, error instanceof Error ? error.message : 'Network error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel a request by ID\n   */\n  public cancelRequest(requestId: string): void {\n    const controller = this.abortControllers.get(requestId);\n    if (controller) {\n      controller.abort();\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel all active requests\n   */\n  public cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  private generateRequestId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  /**\n   * Enhance error messages based on API documentation and status codes\n   */\n  private getEnhancedErrorMessage(status: number, originalMessage: string, errorCode?: string): string {\n    // Handle specific error codes from API documentation\n    switch (status) {\n      case 400:\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID provided. Please ensure you have selected a valid agent.';\n        }\n        if (originalMessage.includes('Agent name can\\'t be empty')) {\n          return 'Agent name cannot be empty. Please provide a valid agent name.';\n        }\n        return 'Invalid request data. Please check your input and try again.';\n      \n      case 401:\n        if (originalMessage.includes('API Token is either missing or invalid')) {\n          return 'Authentication failed. Your API key is missing or invalid. Please check your API key in settings and ensure it has proper permissions.';\n        }\n        return 'Authentication failed. Please check your API key and try again.';\n      \n      case 403:\n        if (originalMessage.includes('license')) {\n          return 'You do not have permission to manage licenses for this agent. Please ensure your API key has the necessary permissions or you are the owner of this agent.';\n        }\n        if (originalMessage.includes('Licenses are not allowed')) {\n          return 'License management is not enabled for this agent. Please enable licenses in the agent settings first.';\n        }\n        return 'Access denied. You do not have permission to perform this action. Please check your API key permissions.';\n      \n      case 404:\n        if (originalMessage.includes('Agent with id')) {\n          return 'The selected agent was not found or you don\\'t have access to it. Please select a different agent or check your permissions.';\n        }\n        if (originalMessage.includes('Agent license with id')) {\n          return 'The specified license was not found. It may have been deleted or you may not have access to it.';\n        }\n        if (originalMessage.includes('Conversation message with id') || originalMessage.includes('not found')) {\n          return 'The requested conversation or message was not found. It may have been deleted or you may not have access to it.';\n        }\n        return 'The requested resource was not found. Please check if it exists and you have access to it.';\n      \n      case 429:\n        if (originalMessage.includes('exhausted your current query credits')) {\n          return 'You have reached your query limit. Please upgrade your plan or contact customer support at https://customgpt.freshdesk.com/support/home for assistance.';\n        }\n        return 'Rate limit exceeded. Please wait a moment and try again, or contact support if you need higher limits.';\n      \n      case 500:\n        if (originalMessage.includes('Internal Server Error')) {\n          return 'Server error occurred. Please try again in a few moments. If the problem persists, contact customer support.';\n        }\n        return 'An unexpected server error occurred. Please try again later.';\n      \n      case 501:\n        if (originalMessage.includes('audio is not yet supported')) {\n          return 'Audio files are not currently supported. Please remove any audio files from your request and try again with text or other supported file types.';\n        }\n        return 'This feature is not yet implemented. Please try a different approach.';\n      \n      case 408:\n        return 'Request timed out. Please check your internet connection and try again.';\n      \n      case 422:\n        // Unprocessable Entity - often used for validation errors\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID format. Please ensure the agent ID is a valid number.';\n        }\n        return 'Invalid data provided. Please check your input and ensure all required fields are correctly formatted.';\n      \n      default:\n        // For other status codes, return the original message with context\n        if (status >= 500) {\n          return `Server error (${status}): ${originalMessage}. Please try again later.`;\n        } else if (status >= 400) {\n          return `Request error (${status}): ${originalMessage}. Please check your input and try again.`;\n        }\n        return originalMessage;\n    }\n  }\n\n  // AGENTS/PROJECTS API METHODS\n\n  /**\n   * Get list of agents\n   */\n  async getAgents(params?: {\n    page?: number;\n    duration?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n  }): Promise<AgentsResponse> {\n    return this.request<AgentsResponse>('/projects', { params });\n  }\n\n  /**\n   * Create new agent/project\n   */\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    files?: File[];\n    is_shared?: boolean;\n  }): Promise<APIResponse<Agent>> {\n    // API requires multipart/form-data\n    const formData = new FormData();\n    formData.append('project_name', data.project_name);\n    \n    if (data.sitemap_path) {\n      formData.append('sitemap_path', data.sitemap_path);\n    }\n    \n    if (data.files && data.files.length > 0) {\n      data.files.forEach((file, index) => {\n        formData.append(`files[${index}]`, file);\n      });\n    }\n    \n    if (data.is_shared !== undefined) {\n      formData.append('is_shared', data.is_shared.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>('/projects', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Get single agent by ID\n   */\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}`);\n  }\n\n\n  /**\n   * Update agent - API only supports updating are_licenses_allowed\n   */\n  async updateAgent(id: number, data: { are_licenses_allowed?: boolean }): Promise<APIResponse<Agent>> {\n    const formData = new FormData();\n    if (data.are_licenses_allowed !== undefined) {\n      formData.append('are_licenses_allowed', data.are_licenses_allowed.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n  \n  /**\n   * Replicate agent\n   */\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n  \n  /**\n   * Get agent stats\n   */\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request<APIResponse<AgentStats>>(`/projects/${id}/stats`);\n  }\n\n  /**\n   * Get agent settings\n   */\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`);\n  }\n\n  /**\n   * Update agent settings\n   */\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    \n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n    });\n  }\n\n  // CONVERSATIONS API METHODS\n\n  /**\n   * Get conversations for a project\n   */\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const enhancedParams = {\n      ...params,\n      userFilter: params?.userFilter || 'all'\n    };\n    return this.request<ConversationsResponse>(`/projects/${projectId}/conversations`, { params: enhancedParams });\n  }\n\n  /**\n   * Create new conversation\n   */\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : JSON.stringify({}),\n    });\n  }\n\n  /**\n   * Update conversation\n   */\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete conversation\n   */\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // MESSAGES API METHODS\n\n  /**\n   * Get messages for a conversation\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: { page?: number; order?: 'asc' | 'desc' }\n  ): Promise<MessagesResponse> {\n    // Add required parameters for message retrieval\n    const enhancedParams = {\n      ...params,\n      stream: false,\n      lang: 'en'\n    };\n    return this.request<MessagesResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, { params: enhancedParams });\n  }\n\n  /**\n   * Send message (non-streaming)\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    }\n  ): Promise<MessageResponse> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 0\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    return this.request<MessageResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      params: { \n        stream: false, \n        lang: 'en' \n      }\n    });\n  }\n\n  /**\n   * Send message with streaming\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    },\n    streamOptions: StreamOptions\n  ): Promise<void> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 1\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    logger.info('API_CLIENT', 'Sending streaming message', {\n      projectId,\n      sessionId,\n      prompt: data.prompt.substring(0, 50),\n      hasCustomPersona: !!data.custom_persona,\n      responseSource: payload.response_source,\n      streamParam: payload.stream\n    });\n    \n    return this.streamRequest(\n      `/projects/${projectId}/conversations/${sessionId}/messages`,\n      {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        params: {\n          stream: 1, // Also include in query params\n          lang: 'en'\n        }\n      },\n      streamOptions\n    );\n  }\n\n  /**\n   * Get a message by ID\n   */\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    promptId: number\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}`\n    );\n  }\n\n  /**\n   * Update message feedback\n   */\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    promptId: number,\n    data: { reaction: 'neutral' | 'disliked' | 'liked' }\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}/feedback`,\n      {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      }\n    );\n  }\n\n  /**\n   * Send message in OpenAI format\n   */\n  async sendMessageOpenAIFormat(\n    projectId: number,\n    data: {\n      messages?: Array<{ role: string; content: string }>;\n      stream?: boolean;\n      lang?: string;\n      is_inline_citation?: boolean;\n    }\n  ): Promise<any> {\n    return this.request<any>(`/projects/${projectId}/chat/completions`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ...data,\n        stream: data.stream ?? false,\n        lang: data.lang || 'en',\n        is_inline_citation: data.is_inline_citation ?? false\n      }),\n    });\n  }\n\n  // CITATIONS API METHODS\n\n  /**\n   * Get citation details\n   */\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request<CitationResponse>(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  // SOURCES API METHODS\n\n\n  /**\n   * Upload file to project\n   */\n  async uploadFile(projectId: number, file: File, options?: {\n    file_data_retension?: boolean;\n    is_ocr_enabled?: boolean;\n    is_anonymized?: boolean;\n  }): Promise<APIResponse<any>> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        if (value !== undefined) {\n          formData.append(key, value.toString());\n        }\n      });\n    }\n\n    return this.request<APIResponse<any>>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Analytics APIs\n   */\n  async getConversationAnalytics(\n    projectId: number, \n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/conversations${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getQueryAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/queries${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getTrafficAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      period?: 'hour' | 'day' | 'week' | 'month';\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.period) queryParams.append('period', params.period);\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/traffic${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getStatistics(projectId: number): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/statistics`);\n  }\n\n  // Reports and Analytics methods\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request<TrafficReportResponse>(`/projects/${projectId}/reports/traffic`, {\n      method: 'GET',\n    });\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request<QueriesReportResponse>(`/projects/${projectId}/reports/queries`, {\n      method: 'GET',\n    });\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request<ConversationsReportResponse>(`/projects/${projectId}/reports/conversations`, {\n      method: 'GET',\n    });\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) {\n      queryParams.append('interval', interval);\n    }\n    \n    return this.request<AnalysisReportResponse>(\n      `/projects/${projectId}/reports/analysis${queryParams.toString() ? `?${queryParams}` : ''}`,\n      {\n        method: 'GET',\n      }\n    );\n  }\n\n  /**\n   * Page Management APIs\n   */\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    return this.request<PagesListResponse>(\n      `/projects/${projectId}/pages${queryParams.toString() ? `?${queryParams}` : ''}`\n    );\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request<DeletePageResponse>(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request<ReindexPageResponse>(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  // Page Metadata methods\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'GET',\n    });\n  }\n\n  async updatePageMetadata(\n    projectId: number, \n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  async previewFile(pageId: number): Promise<any> {\n    return this.request<any>(`/preview/${pageId}`);\n  }\n\n\n  /**\n   * Agent License Management APIs\n   */\n  \n  /**\n   * Get all licenses for an agent\n   */\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request<APIResponse<any[]>>(`/projects/${projectId}/licenses`);\n  }\n\n  /**\n   * Create a new license for an agent\n   */\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Get a specific license for an agent\n   */\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`);\n  }\n\n  /**\n   * Update a license for an agent\n   */\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name: string }\n  ): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete a license for an agent\n   */\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Sources Management APIs\n   */\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request<SourcesListResponse>(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request<DeleteSourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // LIMITS API METHODS\n  \n  /**\n   * Get user's agents, words and queries limit\n   */\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request<LimitsResponse>('/limits/usage');\n  }\n\n  // User Profile API Methods\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n\n  // Generic request methods for use by stores\n  async get<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint);\n  }\n\n  async post<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data instanceof FormData ? data : (data ? JSON.stringify(data) : undefined),\n    });\n  }\n\n  async put<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport class APIError extends Error {\n  constructor(\n    public status: number,\n    message: string,\n    public code?: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n// Default client instance (will be initialized with API key)\nlet defaultClient: CustomGPTAPIClient | null = null;\n\nexport function getClient(): CustomGPTAPIClient {\n  if (!defaultClient) {\n    throw new Error('API client not initialized. Call initializeClient() first.');\n  }\n  return defaultClient;\n}\n\nexport function initializeClient(config: CustomGPTClientConfig): CustomGPTAPIClient {\n  defaultClient = new CustomGPTAPIClient(config);\n  return defaultClient;\n}\n\nexport function isClientInitialized(): boolean {\n  return defaultClient !== null;\n}","export type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      debug: 'color: #6B7280; font-weight: normal;',\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        debug: '\\x1b[90m',\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Send to server for file logging\n    if (level !== 'debug' || !this.isClient) {\n      this.sendToServer(entry);\n    }\n  }\n\n  private async sendToServer(entry: LogEntry) {\n    try {\n      await fetch('/api/log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(entry),\n      });\n    } catch (error) {\n      // Silently fail to avoid infinite loop\n    }\n  }\n\n  debug(category: string, message: string, data?: any) {\n    this.log('debug', category, message, data);\n  }\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.debug('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * For contributors:\n * - Keep utilities pure and reusable\n * - Add JSDoc comments for all functions\n * - Include examples in comments\n * - Handle edge cases gracefully\n * - Export constants for configuration\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Suitable for temporary IDs, not cryptographically secure.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Fail silently but log for debugging\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    console.log('🔍 Parsing stream chunk:', chunk);\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      console.log('📌 SSE event:', eventType);\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      console.log('📦 SSE data:', data);\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        console.log('🎯 Parsed SSE JSON:', parsed);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        console.log('📝 Plain text data:', data);\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        console.log('🎯 Parsed raw JSON:', parsed);\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      console.log('📝 Plain text chunk:', chunk.trim());\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  const words = firstMessage.trim().split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a temporary blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * For contributors:\n * - Always handle multiple API response formats\n * - Update currentAgent when agents list changes\n * - Use optimistic updates for better UX\n * - Log errors for debugging\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n\n      /**\n       * Fetch all agents from the API\n       * \n       * Behavior:\n       * - Shows loading state during fetch\n       * - Auto-selects first agent if none selected\n       * - Handles multiple API response formats\n       * - Clears error state on success\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getAgents();\n          \n          // Handle different response formats from the API\n          // API can return: { data: [...] }, [...], or { data: { data: [...] } }\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              agents = response as Agent[];\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              // Paginated response format\n              agents = (response as any).data.data;\n            }\n          }\n          \n          console.log('Fetched agents:', agents);\n          \n          set({ \n            agents, \n            loading: false,\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], // Ensure agents is always an array even on error\n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: (agent: Agent) => {\n        set({ currentAgent: agent });\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { are_licenses_allowed?: boolean }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { initializeClient, isClientInitialized } from '@/lib/api/client';\n\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null,\n      baseURL: 'https://app.customgpt.ai/api/v1',\n      theme: 'light',\n\n      setApiKey: (key: string) => {\n        set({ apiKey: key });\n        \n        // Initialize API client with new key\n        if (key) {\n          initializeClient({\n            apiKey: key,\n            baseURL: get().baseURL,\n          });\n        }\n      },\n\n      setBaseURL: (url: string) => {\n        set({ baseURL: url });\n        \n        // Re-initialize client if API key exists\n        const { apiKey } = get();\n        if (apiKey) {\n          initializeClient({\n            apiKey,\n            baseURL: url,\n          });\n        }\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update document class for theme\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      partialize: (state) => ({\n        apiKey: state.apiKey,\n        baseURL: state.baseURL,\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize API client on rehydration if API key exists\n        if (state?.apiKey && !isClientInitialized()) {\n          initializeClient({\n            apiKey: state.apiKey,\n            baseURL: state.baseURL,\n          });\n        }\n        \n        // Apply theme on rehydration\n        if (state?.theme && typeof window !== 'undefined') {\n          document.documentElement.className = state.theme;\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n\n      fetchConversations: async (projectId: number) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getConversations(projectId);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              conversations = (response as any).data.data;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          set({ \n            conversations, \n            loading: false,\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation, conversations } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // Look for existing conversations for this project\n        const projectConversations = conversations.filter(c => c.project_id === projectId);\n        if (projectConversations.length > 0) {\n          const conversation = projectConversations[0];\n          set({ currentConversation: conversation });\n          return conversation;\n        }\n        \n        // Create new conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        currentConversation: state.currentConversation,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state && !Array.isArray(state.conversations)) {\n          state.conversations = [];\n        }\n      },\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * For contributors:\n * - Always update both local state and storage\n * - Handle API errors gracefully with fallbacks\n * - Use logger for debugging\n * - Maintain message order and IDs\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to save messages to local storage:', error);\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to load messages from local storage:', error);\n    return null;\n  }\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Check if in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      throw new Error('No agent selected');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      if (files && files.length > 0) {\n        const client = getClient();\n        await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50)\n      });\n      \n      try {\n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          { \n            prompt: content,\n            response_source: 'default',  // Required field as per API documentation\n            stream: 1  // Include stream parameter in body as per SDK examples\n          },\n          {\n            onChunk: (chunk) => {\n              logger.debug('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current) {\n                  set({\n                    streamingMessage: {\n                      ...current,\n                      citations: chunk.citations\n                    }\n                  });\n                }\n              }\n            },\n            onComplete: () => {\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                get().addMessage(conversation.id.toString(), finalMessage);\n              }\n              \n              set({ \n                streamingMessage: null,\n                isStreaming: false,\n              });\n            },\n            onError: async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: content,\n                    response_source: 'default',  // Required field as per API documentation\n                    stream: 0  // Explicitly disable streaming\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  finalMessage.citations = messageData?.citations || [];\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                console.error('Both streaming and fallback failed:', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: `Communication error: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`,\n                });\n              }\n            },\n          }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      console.error('Failed to send message:', error);\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: error instanceof Error ? error.message : 'Failed to send message',\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) return;\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) return;\n\n    try {\n      // Update local state immediately\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API (assuming we have the prompt ID)\n      // Note: This would need to be adjusted based on the actual API structure\n      // const client = getClient();\n      // await client.updateMessageFeedback(currentAgent.id, currentConversation.id, promptId, {\n      //   reaction: feedback === 'like' ? 'liked' : 'disliked'\n      // });\n    } catch (error) {\n      console.error('Failed to update message feedback:', error);\n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        messages.forEach(msg => {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: msg.citations || [],\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction || msg.feedback,\n            });\n          }\n        });\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, formattedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, formattedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { startDate, endDate } = get().dateRange;\n      \n      // Fetch all analytics data in parallel\n      const [conversations, queries, traffic, statistics, reports] = await Promise.all([\n        client.getConversationAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getQueryAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getTrafficAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n          period: 'day',\n        }),\n        client.getStatistics(projectId),\n        client.getAnalysisReport(projectId, 'weekly'),\n      ]);\n\n      // Transform the data to match our interface\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversations.data?.total || 0,\n          active: conversations.data?.active || 0,\n          trend: conversations.data?.trend || 0,\n          data: conversations.data?.timeline || [],\n        },\n        queries: {\n          total: queries.data?.total || 0,\n          successful: queries.data?.successful || 0,\n          failed: queries.data?.failed || 0,\n          avgResponseTime: queries.data?.avg_response_time || 0,\n          topQueries: queries.data?.top_queries || [],\n          data: queries.data?.timeline || [],\n        },\n        traffic: {\n          uniqueUsers: traffic.data?.unique_users || 0,\n          pageViews: traffic.data?.page_views || 0,\n          avgSessionDuration: traffic.data?.avg_session_duration || 0,\n          bounceRate: traffic.data?.bounce_rate || 0,\n          data: traffic.data?.timeline || [],\n        },\n        statistics: {\n          totalMessages: statistics.data?.total_messages || 0,\n          totalConversations: statistics.data?.total_conversations || 0,\n          avgMessagesPerConversation: statistics.data?.avg_messages_per_conversation || 0,\n          satisfactionRate: statistics.data?.satisfaction_rate || 0,\n          responseAccuracy: statistics.data?.response_accuracy || 0,\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error) {\n      console.error('Failed to fetch analytics:', error);\n      set({ \n        analytics: null,\n        error: error instanceof Error ? error.message : 'Failed to fetch analytics',\n        loading: false,\n      });\n      toast.error('Failed to fetch analytics data');\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Temporarily disabled - sources are now managed directly in components using the API\n// This store will be removed or updated to match the new API structure\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Mock implementation to avoid breaking imports\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // const response = await client.getSources(projectId);\n      \n      const sources: Source[] = []; // Array.isArray(response.data) ? response.data : [];\n      set({ sources, loading: false });\n      throw new Error('Sources API integration needs update');\n    } catch (error) {\n      console.error('Failed to fetch sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      console.error('Failed to fetch source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      console.error('Failed to upload sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      console.error('Failed to update source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      console.error('Failed to delete sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      console.error('Failed to sync sources:', error);\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.get<CustomGPTResponse<UserProfile>>('/user');\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error) {\n          console.error('Failed to fetch profile:', error);\n          set({ \n            error: `Failed to fetch profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to load profile');\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.post<CustomGPTResponse<UserProfile>>('/user', formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error) {\n          console.error('Failed to update profile:', error);\n          set({ \n            error: `Failed to update profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to update profile');\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse } from '@/types';\n\nexport interface ProjectSettings {\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  default_prompt?: string;\n  example_questions?: string[];\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_msg_lang?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  persona_instructions?: string;\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\nexport interface ProjectStats {\n  total_conversations: number;\n  total_messages: number;\n  total_sources: number;\n  total_pages: number;\n  last_activity: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectSettings>>(\n        `/projects/${projectId}/settings`\n      );\n\n      if (response.status === 200) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields\n            value.forEach((question, index) => {\n              formData.append(`example_questions[${index}]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().post<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/settings`,\n        formData\n      );\n\n      if (response.status === 200 && response.data.updated) {\n        // Merge updated settings with current settings\n        const currentSettings = get().settings || {};\n        const newSettings = { ...currentSettings, ...settingsUpdate };\n        \n        set({ \n          settings: newSettings, \n          settingsLoading: false \n        });\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectPlugin[]>>(\n        `/projects/${projectId}/plugins`\n      );\n\n      if (response.status === 200) {\n        set({ \n          plugins: Array.isArray(response.data) ? response.data : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().put<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/plugins/${pluginId}`,\n        { enabled }\n      );\n\n      if (response.status === 200) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectStats>>(\n        `/projects/${projectId}/stats`\n      );\n\n      if (response.status === 200) {\n        set({ \n          stats: response.data, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0,\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch licenses';\n      set({ \n        error: errorMessage,\n        loading: false,\n        licenses: []\n      });\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...',\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to create license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * For contributors:\n * - Add new stores here when creating new features\n * - Keep stores focused on a single domain\n * - Use TypeScript interfaces from @/types\n * - Handle errors gracefully in async operations\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(798)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","size","sm","lg","icon","defaultVariants","Button","React","className","asChild","props","ref","_jsx","cn","displayName","CitationCard","citation","index","isExpanded","onToggle","onClick","_jsxs","children","title","source","url","ChevronDown","AnimatePresence","motion","div","initial","height","opacity","animate","exit","transition","duration","content","confidence","Math","round","style","width","href","target","rel","ExternalLink","CitationList","citations","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","slice","hasMore","length","BookOpen","map","idx","y","delay","has","id","citationId","newExpanded","delete","add","toggleExpanded","CodeBlock","language","value","copied","setCopied","async","copyToClipboard","toast","success","setTimeout","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","fontSize","StreamingCursor","MessageContent","isStreaming","ReactMarkdown","remarkPlugins","remarkGfm","components","code","match","exec","String","replace","a","MessageActions","message","onFeedback","feedback","setFeedback","handleFeedback","type","Copy","ThumbsUp","ThumbsDown","handleRegenerate","info","RotateCw","Message","isLast","isUser","role","User","Bot","status","formatTimestamp","timestamp","FileChip","file","onRemove","fileIcon","getFileIcon","scale","name","formatFileSize","_Fragment","progress","AlertCircle","disabled","X","FileUploadButton","onUpload","fileInputRef","useRef","multiple","accept","CONSTANTS","ACCEPTED_FILE_TYPES","join","onChange","e","files","Array","from","handleClick","current","click","Paperclip","ChatInput","onSend","placeholder","maxLength","MAX_MESSAGE_LENGTH","input","setInput","setFiles","isDragOver","setIsDragOver","textareaRef","adjustTextareaHeight","useCallback","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","trim","fileObjects","filter","f","focus","handleFileUpload","newFiles","uploadFiles","MAX_FILE_SIZE","error","isFileTypeAllowed","generateId","prev","forEach","uploadFile","simulateUpload","interval","setInterval","random","clearInterval","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","reduce","acc","maxSize","onDragEnter","onDragLeave","canSend","some","Upload","removeFile","fileId","onSubmit","onKeyDown","key","shiftKey","rows","overflowY","split","Square","Send","TypingIndicator","AgentItem","agent","isSelected","onSelect","onSettingsClick","project_name","Check","settings","chatbot_model","is_chat_active","stopPropagation","Settings","AgentSelector","showSettings","isOpen","setIsOpen","dropdownRef","agents","currentAgent","loading","fetchAgents","selectAgent","useAgentStore","useEffect","handleClickOutside","event","contains","document","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","isArray","undefined","CitationDetailsModal","onClose","projectId","setLoading","setError","citationData","setCitationData","imageError","setImageError","effectiveProjectId","fetchCitationDetails","client","getClient","response","getCitation","parseInt","data","logger","hasImage","image","err","errorMessage","Error","Loader","src","alt","onError","Globe","description","ImageIcon","ConversationManager","sessionId","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","conversations","setConversations","editingId","setEditingId","editTitle","setEditTitle","setIsExpanded","loadConversations","stored","localStorage","getItem","parsed","JSON","parse","window","handleEditSave","conversationId","updated","c","setItem","stringify","currentConversation","find","MessageCircle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","handleCreateConversation","Plus","conversation","autoFocus","handleSelectConversation","Date","createdAt","toLocaleDateString","handleEditStart","Edit2","filtered","handleDelete","Trash2","EXAMPLE_PROMPTS","ExamplePromptCard","prompt","WelcomeMessage","onPromptClick","Sparkles","MessageArea","messages","streamingMessage","sendMessage","useMessageStore","useConversationStore","scrollRef","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","conversationMessages","get","toString","scrollTo","top","behavior","handleCitationClick","citationIndex","citationTitle","fillRule","clipRule","includes","handleMessageFeedback","messageId","ChatHeader","mode","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","cancelStreaming","setCurrentConversationId","debug","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","agentId","agentName","CustomGPTWidget","widget","__customgpt_widget_instance","switchConversation","newConv","createConversation","configuration","contentLength","hasFiles","fileCount","isAuthError","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","inputRef","menuRef","select","handleSaveEdit","onBlur","Calendar","updated_at","message_count","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","searchQuery","setSearchQuery","isCreating","setIsCreating","fetchConversations","selectConversation","deleteConversation","updateConversation","clearMessages","loadMessages","isDemoMode","__customgpt_demo_mode","isActive","warn","filteredConversations","toLowerCase","conversationName","project_id","messageCount","errorType","constructor","handleRenameConversation","newName","session_id","MessageSquare","Search","Link","BarChart3","FileText","Database","Bug","handleDeleteConversation","_","i","ChatLayout","showSidebar","widgetInstance","sidebarCollapsed","setSidebarCollapsed","storeCurrentConversation","handleToggleSidebar","config","_defineProperty","apiKey","theme","position","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","performance","now","substr","generateSessionId","instanceKey","init","useConfigStore","getState","setApiKey","__customgpt_sessions","__customgpt_session","startsWith","fallbackAgent","setAgents","agentsResponse","getAgents","createContainer","render","getConversations","require","currentConv","fullConversation","setState","__customgpt_widget_instances","__customgpt_active_widget_session","container","getElementById","createElement","setupFloatingStyles","body","appendChild","Object","assign","zIndex","boxShadow","overflow","backgroundColor","classList","bottom","right","left","display","transform","createRoot","WidgetApp","currentConvId","handleClose","close","Toaster","toastOptions","open","storeConversations","conv","newConversation","toISOString","unshift","saveConversations","messageStore","updateConversationTitle","newTitle","DOMException","cleanupOldConversations","recent","onOpen","toggle","destroy","unmount","parentNode","removeChild","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","create","CustomGPTAPIClient","Map","baseURL","timeout","retryAttempts","retryDelay","hasApiKey","apiKeyPreview","substring","request","endpoint","options","params","fetchOptions","URL","entries","searchParams","append","headers","FormData","requestOptions","apiRequest","method","retryWithBackoff","abortController","AbortController","requestId","generateRequestId","abortControllers","set","timeoutId","abort","fetch","signal","clearTimeout","ok","errorText","text","errorCode","errorData","enhancedMessage","getEnhancedErrorMessage","apiError","originalMessage","fromEntries","APIError","json","apiResponse","dataPreview","streamRequest","streamOptions","onChunk","onComplete","hasBody","bodyContent","contentType","isEventStream","reader","getReader","decoder","TextDecoder","buffer","hasReceivedData","done","read","decode","stream","lines","pop","line","fullLine","lineLength","chunk","parseStreamChunk","hasContent","contentPreview","hasCitations","originalLine","releaseLock","cancelRequest","controller","cancelAllRequests","clear","createAgent","formData","sitemap_path","is_shared","getAgent","updateAgent","are_licenses_allowed","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","isFormData","enhancedParams","userFilter","getMessages","lang","payload","response_source","custom_persona","keys","sendMessageStream","hasCustomPersona","responseSource","streamParam","getMessageById","promptId","updateMessageFeedback","sendMessageOpenAIFormat","is_inline_citation","getConversationAnalytics","queryParams","URLSearchParams","start_date","end_date","limit","getQueryAnalytics","getTrafficAnalytics","period","getStatistics","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","getPages","page","order","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","metadata","previewFile","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getUserLimits","getUserProfile","updateUserProfile","post","put","details","super","defaultClient","initializeClient","isClientInitialized","Logger","isClient","getInstance","instance","formatMessage","entry","level","category","stack","formatted","toUpperCase","writeToFile","log","logs","push","sendToServer","getLogs","clearLogs","authCheck","authError","navigation","route","storeAction","store","action","inputs","twMerge","clsx","bytes","floor","parseFloat","pow","toFixed","fileType","allowedTypes","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","navigator","clipboard","writeText","delta","choices","jsonError","parseError","ms","Promise","resolve","fn","maxAttempts","baseDelay","lastError","attempt","delayTime","generateConversationName","firstMessage","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","persist","newAgent","state","updatedAgent","filteredAgents","partialize","setBaseURL","setTheme","documentElement","onRehydrateStorage","responseType","hasData","dataLength","count","messagesCount","updatedConversations","updatedConversation","ensureConversation","projectConversations","getSessionId","__customgpt_current_session","sessions","sessionIds","sessionStorage","StreamHandler","processStream","callbacks","currentMessage","isComplete","cancel","processLine","onCitation","getCurrentMessage","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","cancelAllStreams","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","cache","agentStore","conversationStore","messageLength","hasSessionId","isNew","userMessage","addMessage","assistantMessage","all","messageContent","updateStreamingMessage","finalMessage","streamError","messageData","openai_response","fallbackError","setupError","newMessages","existingIndex","findIndex","m","updatedMessage","getMessagesForConversation","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","created_at","user_query","response_feedback","reaction","formattedCount","cachedMessages","loadMessagesFromStorage","useUIStore","sidebarOpen","settingsOpen","setSidebarOpen","setSettingsOpen","setFontSize","remove","formatDate","getDefaultDateRange","endDate","startDate","setDate","getDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","queries","traffic","statistics","reports","analyticsData","total","active","trend","timeline","successful","failed","avgResponseTime","avg_response_time","topQueries","top_queries","uniqueUsers","unique_users","pageViews","page_views","avgSessionDuration","avg_session_duration","bounceRate","bounce_rate","totalMessages","total_messages","totalConversations","total_conversations","avgMessagesPerConversation","avg_messages_per_conversation","satisfactionRate","satisfaction_rate","responseAccuracy","response_accuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","createObjectURL","download","revokeObjectURL","reset","usePageStore","pages","paginationInfo","current_page","per_page","last_page","fetchPages","setQueryParams","useSourceStore","sources","currentSource","sortBy","sortOrder","syncStatus","syncing","fetchSources","fetchSource","uploadSources","uploadPromises","reject","updateSource","updates","bulkDelete","sourceIds","syncSources","query","setFilter","selectSource","useProfileStore","profile","fetchProfile","updateProfile","profilePhoto","activeRequests","useProjectSettingsStore","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","updateSettings","settingsUpdate","question","File","newSettings","fetchPlugins","updatePlugin","pluginId","enabled","plugin","fetchStats","useLicenseStore","licenses","fetchLicenses","dataType","fullResponse","l","errorStatus","fullError","dataStructure","licenseKey","newLicense","license","licenseName","clearError","initializeStores","cleanupStores","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}
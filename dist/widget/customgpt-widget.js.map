{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationList.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationManager.tsx","webpack://CustomGPTWidget/./src/widget/WidgetContext.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","/**\n * CustomGPT API Client\n * \n * Central API client for all CustomGPT.ai backend communication.\n * This client handles:\n * - Authentication via API key\n * - Request/response formatting\n * - Error handling and retries\n * - Streaming responses for real-time chat\n * - File uploads for agent training\n * \n * Architecture:\n * - Uses native fetch API\n * - Supports both REST and streaming endpoints\n * - Implements exponential backoff for retries\n * - Manages abort controllers for cancellation\n * \n * Key Features:\n * - Type-safe API methods\n * - Automatic retry with backoff\n * - Request timeout handling\n * - Stream parsing for chat responses\n * - Comprehensive error logging\n * \n * For contributors:\n * - All API methods should be type-safe\n * - Handle both successful and error responses\n * - Use logger for debugging\n * - Support request cancellation\n * - Document any API quirks or workarounds\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff, delay } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n/**\n * User profile API response format\n */\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * Configuration options for the API client\n */\nexport interface CustomGPTClientConfig {\n  /** CustomGPT.ai API key for authentication */\n  apiKey: string;\n  /** Base URL for API calls (defaults to production) */\n  baseURL?: string;\n  /** Request timeout in milliseconds (default: 30000) */\n  timeout?: number;\n  /** Number of retry attempts for failed requests (default: 3) */\n  retryAttempts?: number;\n  /** Delay between retries in milliseconds (default: 1000) */\n  retryDelay?: number;\n}\n\n/**\n * Extended fetch options with additional features\n */\nexport interface RequestOptions extends RequestInit {\n  /** Request timeout override */\n  timeout?: number;\n  /** Retry attempts override */\n  retryAttempts?: number;\n  /** Query parameters to append to URL */\n  params?: Record<string, string | number | boolean>;\n}\n\n/**\n * Options for handling streaming responses\n */\nexport interface StreamOptions {\n  /** Called for each chunk of streaming data */\n  onChunk?: (chunk: StreamChunk) => void;\n  /** Called when streaming completes successfully */\n  onComplete?: () => void;\n  /** Called if streaming encounters an error */\n  onError?: (error: Error) => void;\n  /** Timeout for the stream */\n  timeout?: number;\n}\n\n/**\n * Main API client class\n * \n * Usage:\n * ```typescript\n * const client = new CustomGPTAPIClient({\n *   apiKey: 'your-api-key',\n *   baseURL: 'https://app.customgpt.ai/api/v1'\n * });\n * \n * // Get agents\n * const agents = await client.getAgents();\n * \n * // Send message with streaming\n * await client.sendMessageStream(agentId, sessionId, message, {\n *   onChunk: (chunk) => console.log(chunk),\n *   onComplete: () => console.log('Done')\n * });\n * ```\n */\nexport class CustomGPTAPIClient {\n  private baseURL: string;\n  private apiKey: string;\n  private timeout: number;\n  private retryAttempts: number;\n  private retryDelay: number;\n  /** Map of request IDs to abort controllers for cancellation */\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor(config: CustomGPTClientConfig) {\n    this.apiKey = config.apiKey;\n    this.baseURL = config.baseURL || 'https://app.customgpt.ai/api/v1';\n    this.timeout = config.timeout || 30000;\n    this.retryAttempts = config.retryAttempts || 3;\n    this.retryDelay = config.retryDelay || 1000;\n    \n    // Log initialization for debugging\n    logger.info('API_CLIENT', 'CustomGPT API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      hasApiKey: !!this.apiKey,\n      apiKeyPreview: this.apiKey ? `${this.apiKey.substring(0, 10)}...` : 'none'\n    });\n  }\n\n  /**\n   * Generic request method with retry logic and error handling\n   * \n   * Features:\n   * - Automatic retry with exponential backoff\n   * - Request timeout handling\n   * - Proper error messages for debugging\n   * - Request cancellation support\n   * \n   * @param endpoint - API endpoint path (e.g., '/projects')\n   * @param options - Request options including method, body, etc.\n   * @returns Promise resolving to the API response\n   * @throws Error if request fails after all retries\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestOptions = {}\n  ): Promise<T> {\n    const {\n      timeout = this.timeout,\n      retryAttempts = this.retryAttempts,\n      params,\n      ...fetchOptions\n    } = options;\n\n    // Build URL with query parameters\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const headers: Record<string, string> = {\n      'Authorization': `Bearer ${this.apiKey}`,\n      'Accept': 'application/json',\n      ...(fetchOptions.headers as Record<string, string>),\n    };\n\n    // Only set Content-Type if body is not FormData\n    if (!(fetchOptions.body instanceof FormData)) {\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const requestOptions: RequestInit = {\n      ...fetchOptions,\n      headers,\n    };\n\n    // Log the request\n    logger.apiRequest(endpoint, fetchOptions.method || 'GET', {\n      url: url.toString(),\n      headers: {\n        ...headers,\n        'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...` // Mask API key\n      },\n      body: fetchOptions.body ? \n        (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') \n        : undefined\n    });\n\n    return retryWithBackoff(\n      async () => {\n        const abortController = new AbortController();\n        const requestId = this.generateRequestId();\n        this.abortControllers.set(requestId, abortController);\n\n        // Set timeout\n        const timeoutId = setTimeout(() => {\n          abortController.abort();\n        }, timeout);\n\n        try {\n          const response = await fetch(url.toString(), {\n            ...requestOptions,\n            signal: abortController.signal,\n          });\n\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n\n          if (!response.ok) {\n            const errorText = await response.text();\n            let errorMessage: string;\n            let errorCode: string | undefined;\n            \n            try {\n              const errorData = JSON.parse(errorText);\n              // Handle both direct error format and nested data format\n              if (errorData.data && errorData.data.code && errorData.data.message) {\n                errorMessage = errorData.data.message;\n                errorCode = errorData.data.code.toString();\n              } else {\n                errorMessage = errorData.message || errorData.error || 'Unknown error';\n                errorCode = errorData.code?.toString();\n              }\n            } catch {\n              errorMessage = errorText || `HTTP ${response.status}`;\n            }\n\n            // Enhance error messages based on status codes and API documentation\n            const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n            logger.apiError(endpoint, {\n              status: response.status,\n              message: enhancedMessage,\n              originalMessage: errorMessage,\n              errorCode,\n              headers: Object.fromEntries(response.headers.entries())\n            });\n\n            throw new APIError(response.status, enhancedMessage, errorCode);\n          }\n\n          const data = await response.json();\n          \n          logger.apiResponse(endpoint, response.status, {\n            headers: Object.fromEntries(response.headers.entries()),\n            dataPreview: JSON.stringify(data).substring(0, 200) + '...'\n          });\n\n          return data;\n        } catch (error) {\n          clearTimeout(timeoutId);\n          this.abortControllers.delete(requestId);\n          \n          if (error instanceof APIError) {\n            throw error;\n          }\n          \n          if (error instanceof Error && error.name === 'AbortError') {\n            throw new APIError(408, 'Request timeout');\n          }\n          \n          throw new APIError(0, error instanceof Error ? error.message : 'Network error');\n        }\n      },\n      retryAttempts,\n      this.retryDelay\n    );\n  }\n\n  /**\n   * Streaming request method for real-time responses\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestOptions = {},\n    streamOptions: StreamOptions = {}\n  ): Promise<void> {\n    const {\n      timeout = 60000, // Longer timeout for streaming\n      params,\n      ...fetchOptions\n    } = options;\n\n    const { onChunk, onComplete, onError } = streamOptions;\n    \n    logger.info('API_CLIENT', 'Starting stream request', {\n      endpoint,\n      method: options.method || 'GET',\n      hasBody: !!fetchOptions.body,\n      bodyContent: fetchOptions.body ? (typeof fetchOptions.body === 'string' ? JSON.parse(fetchOptions.body) : 'FormData') : undefined\n    });\n\n    // Build URL with stream parameter - CustomGPT requires stream=1 in query params\n    const url = new URL(`${this.baseURL}${endpoint}`);\n    url.searchParams.append('stream', '1');\n    url.searchParams.append('lang', 'en'); // Add required lang parameter\n    \n    if (params) {\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          url.searchParams.append(key, value.toString());\n        }\n      });\n    }\n\n    const abortController = new AbortController();\n    const requestId = this.generateRequestId();\n    this.abortControllers.set(requestId, abortController);\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      abortController.abort();\n    }, timeout);\n\n    try {\n      logger.apiRequest(endpoint, fetchOptions.method || 'POST', {\n        url: url.toString(),\n        headers: {\n          'Authorization': `Bearer ${this.apiKey.substring(0, 10)}...`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n        },\n        body: fetchOptions.body ? JSON.parse(fetchOptions.body as string) : undefined\n      });\n      \n      const response = await fetch(url.toString(), {\n        ...fetchOptions,\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`,\n          'Content-Type': 'application/json',\n          'Accept': 'text/event-stream',\n          ...fetchOptions.headers,\n        },\n        signal: abortController.signal,\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        let errorCode: string | undefined;\n        \n        try {\n          const errorData = JSON.parse(errorText);\n          // Handle both direct error format and nested data format\n          if (errorData.data && errorData.data.code && errorData.data.message) {\n            errorMessage = errorData.data.message;\n            errorCode = errorData.data.code.toString();\n          } else {\n            errorMessage = errorData.message || errorData.error || 'Unknown error';\n            errorCode = errorData.code?.toString();\n          }\n        } catch {\n          errorMessage = errorText || `HTTP ${response.status}`;\n        }\n\n        // Enhance error messages\n        const enhancedMessage = this.getEnhancedErrorMessage(response.status, errorMessage, errorCode);\n\n        logger.apiError(endpoint, {\n          status: response.status,\n          message: enhancedMessage,\n          originalMessage: errorMessage,\n          errorCode,\n          headers: Object.fromEntries(response.headers.entries())\n        });\n        \n        throw new APIError(response.status, enhancedMessage, errorCode);\n      }\n      \n      logger.apiResponse(endpoint, response.status, {\n        headers: Object.fromEntries(response.headers.entries()),\n        contentType: response.headers.get('content-type'),\n        isEventStream: response.headers.get('content-type')?.includes('text/event-stream')\n      });\n\n      const reader = response.body?.getReader();\n      if (!reader) {\n        throw new APIError(500, 'No response body');\n      }\n\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      try {\n        let hasReceivedData = false;\n        \n        while (true) {\n          const { done, value } = await reader.read();\n          \n          if (done) {\n            logger.info('STREAM', 'Stream ended', { hasReceivedData });\n            \n            // If we haven't received any data, this might indicate an issue\n            if (!hasReceivedData) {\n              logger.warn('STREAM', 'Stream ended without receiving any data - possible API issue');\n              onError?.(new Error('No data received from stream - the API may not support streaming or there was a connection issue'));\n              return;\n            }\n            \n            onComplete?.();\n            break;\n          }\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split('\\n');\n          buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n          for (const line of lines) {\n            if (line.trim()) {\n              hasReceivedData = true;\n              \n              logger.debug('STREAM', 'Raw SSE line received', { \n                line: line.substring(0, 200),\n                fullLine: line,\n                lineLength: line.length \n              });\n              \n              const chunk = parseStreamChunk(line);\n              if (chunk) {\n                logger.debug('STREAM', 'Successfully parsed chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentPreview: chunk.content?.substring(0, 100),\n                  hasCitations: !!chunk.citations\n                });\n                \n                if (chunk.type === 'done') {\n                  logger.info('STREAM', 'Stream completed with done signal');\n                  onComplete?.();\n                  return;\n                } else if (chunk.type === 'error') {\n                  logger.error('STREAM', 'Stream error received', { error: chunk.error });\n                  onError?.(new Error(chunk.error || 'Stream error'));\n                  return;\n                } else {\n                  onChunk?.(chunk);\n                }\n              } else {\n                logger.warn('STREAM', 'Failed to parse chunk or chunk was null', { \n                  originalLine: line.substring(0, 200) \n                });\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n    } catch (error) {\n      if (error instanceof APIError) {\n        onError?.(error);\n      } else if (error instanceof Error && error.name === 'AbortError') {\n        onError?.(new APIError(408, 'Request timeout'));\n      } else {\n        onError?.(new APIError(0, error instanceof Error ? error.message : 'Network error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel a request by ID\n   */\n  public cancelRequest(requestId: string): void {\n    const controller = this.abortControllers.get(requestId);\n    if (controller) {\n      controller.abort();\n      this.abortControllers.delete(requestId);\n    }\n  }\n\n  /**\n   * Cancel all active requests\n   */\n  public cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  private generateRequestId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n\n  /**\n   * Enhance error messages based on API documentation and status codes\n   */\n  private getEnhancedErrorMessage(status: number, originalMessage: string, errorCode?: string): string {\n    // Handle specific error codes from API documentation\n    switch (status) {\n      case 400:\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID provided. Please ensure you have selected a valid agent.';\n        }\n        if (originalMessage.includes('Agent name can\\'t be empty')) {\n          return 'Agent name cannot be empty. Please provide a valid agent name.';\n        }\n        return 'Invalid request data. Please check your input and try again.';\n      \n      case 401:\n        if (originalMessage.includes('API Token is either missing or invalid')) {\n          return 'Authentication failed. Your API key is missing or invalid. Please check your API key in settings and ensure it has proper permissions.';\n        }\n        return 'Authentication failed. Please check your API key and try again.';\n      \n      case 403:\n        if (originalMessage.includes('license')) {\n          return 'You do not have permission to manage licenses for this agent. Please ensure your API key has the necessary permissions or you are the owner of this agent.';\n        }\n        if (originalMessage.includes('Licenses are not allowed')) {\n          return 'License management is not enabled for this agent. Please enable licenses in the agent settings first.';\n        }\n        return 'Access denied. You do not have permission to perform this action. Please check your API key permissions.';\n      \n      case 404:\n        if (originalMessage.includes('Agent with id')) {\n          return 'The selected agent was not found or you don\\'t have access to it. Please select a different agent or check your permissions.';\n        }\n        if (originalMessage.includes('Agent license with id')) {\n          return 'The specified license was not found. It may have been deleted or you may not have access to it.';\n        }\n        if (originalMessage.includes('Conversation message with id') || originalMessage.includes('not found')) {\n          return 'The requested conversation or message was not found. It may have been deleted or you may not have access to it.';\n        }\n        return 'The requested resource was not found. Please check if it exists and you have access to it.';\n      \n      case 429:\n        if (originalMessage.includes('exhausted your current query credits')) {\n          return 'You have reached your query limit. Please upgrade your plan or contact customer support at https://customgpt.freshdesk.com/support/home for assistance.';\n        }\n        return 'Rate limit exceeded. Please wait a moment and try again, or contact support if you need higher limits.';\n      \n      case 500:\n        if (originalMessage.includes('Internal Server Error')) {\n          return 'Server error occurred. Please try again in a few moments. If the problem persists, contact customer support.';\n        }\n        return 'An unexpected server error occurred. Please try again later.';\n      \n      case 501:\n        if (originalMessage.includes('audio is not yet supported')) {\n          return 'Audio files are not currently supported. Please remove any audio files from your request and try again with text or other supported file types.';\n        }\n        return 'This feature is not yet implemented. Please try a different approach.';\n      \n      case 408:\n        return 'Request timed out. Please check your internet connection and try again.';\n      \n      case 422:\n        // Unprocessable Entity - often used for validation errors\n        if (originalMessage.includes('Agent id must be integer')) {\n          return 'Invalid agent ID format. Please ensure the agent ID is a valid number.';\n        }\n        return 'Invalid data provided. Please check your input and ensure all required fields are correctly formatted.';\n      \n      default:\n        // For other status codes, return the original message with context\n        if (status >= 500) {\n          return `Server error (${status}): ${originalMessage}. Please try again later.`;\n        } else if (status >= 400) {\n          return `Request error (${status}): ${originalMessage}. Please check your input and try again.`;\n        }\n        return originalMessage;\n    }\n  }\n\n  // AGENTS/PROJECTS API METHODS\n\n  /**\n   * Get list of agents\n   */\n  async getAgents(params?: {\n    page?: number;\n    duration?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n  }): Promise<AgentsResponse> {\n    return this.request<AgentsResponse>('/projects', { params });\n  }\n\n  /**\n   * Create new agent/project\n   */\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    files?: File[];\n    is_shared?: boolean;\n  }): Promise<APIResponse<Agent>> {\n    // API requires multipart/form-data\n    const formData = new FormData();\n    formData.append('project_name', data.project_name);\n    \n    if (data.sitemap_path) {\n      formData.append('sitemap_path', data.sitemap_path);\n    }\n    \n    if (data.files && data.files.length > 0) {\n      data.files.forEach((file, index) => {\n        formData.append(`files[${index}]`, file);\n      });\n    }\n    \n    if (data.is_shared !== undefined) {\n      formData.append('is_shared', data.is_shared.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>('/projects', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Get single agent by ID\n   */\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}`);\n  }\n\n\n  /**\n   * Update agent - API only supports updating are_licenses_allowed\n   */\n  async updateAgent(id: number, data: { are_licenses_allowed?: boolean }): Promise<APIResponse<Agent>> {\n    const formData = new FormData();\n    if (data.are_licenses_allowed !== undefined) {\n      formData.append('are_licenses_allowed', data.are_licenses_allowed.toString());\n    }\n    \n    return this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Delete agent\n   */\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n  \n  /**\n   * Replicate agent\n   */\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request<APIResponse<Agent>>(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n  \n  /**\n   * Get agent stats\n   */\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request<APIResponse<AgentStats>>(`/projects/${id}/stats`);\n  }\n\n  /**\n   * Get agent settings\n   */\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`);\n  }\n\n  /**\n   * Update agent settings\n   */\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    \n    return this.request<APIResponse<AgentSettings>>(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n    });\n  }\n\n  // CONVERSATIONS API METHODS\n\n  /**\n   * Get conversations for a project\n   */\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: 'id' | 'created_at';\n    name?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const enhancedParams = {\n      ...params,\n      userFilter: params?.userFilter || 'all'\n    };\n    return this.request<ConversationsResponse>(`/projects/${projectId}/conversations`, { params: enhancedParams });\n  }\n\n  /**\n   * Create new conversation\n   */\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : JSON.stringify({}),\n    });\n  }\n\n  /**\n   * Update conversation\n   */\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request<APIResponse<Conversation>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete conversation\n   */\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request<APIResponse<{ deleted: boolean }>>(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // MESSAGES API METHODS\n\n  /**\n   * Get messages for a conversation\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: { page?: number; order?: 'asc' | 'desc' }\n  ): Promise<MessagesResponse> {\n    // Add required parameters for message retrieval\n    const enhancedParams = {\n      ...params,\n      stream: false,\n      lang: 'en'\n    };\n    return this.request<MessagesResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, { params: enhancedParams });\n  }\n\n  /**\n   * Send message (non-streaming)\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    }\n  ): Promise<MessageResponse> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 0\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    return this.request<MessageResponse>(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(payload),\n      params: { \n        stream: false, \n        lang: 'en' \n      }\n    });\n  }\n\n  /**\n   * Send message with streaming\n   * Note: sessionId here is actually the session_id from the conversation, not the conversation id\n   */\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      custom_persona?: string;\n      chatbot_model?: string;\n      response_source?: 'default' | 'own_content' | 'openai_content';\n      stream?: number;\n    },\n    streamOptions: StreamOptions\n  ): Promise<void> {\n    // Include required fields as per API documentation\n    const payload = {\n      prompt: data.prompt,\n      response_source: data.response_source || 'default',\n      custom_persona: data.custom_persona,\n      chatbot_model: data.chatbot_model,\n      stream: 1\n    };\n    \n    // Remove undefined values\n    Object.keys(payload).forEach(key => {\n      if (payload[key as keyof typeof payload] === undefined) {\n        delete payload[key as keyof typeof payload];\n      }\n    });\n    \n    logger.info('API_CLIENT', 'Sending streaming message', {\n      projectId,\n      sessionId,\n      prompt: data.prompt.substring(0, 50),\n      hasCustomPersona: !!data.custom_persona,\n      responseSource: payload.response_source,\n      streamParam: payload.stream\n    });\n    \n    return this.streamRequest(\n      `/projects/${projectId}/conversations/${sessionId}/messages`,\n      {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        params: {\n          stream: 1, // Also include in query params\n          lang: 'en'\n        }\n      },\n      streamOptions\n    );\n  }\n\n  /**\n   * Get a message by ID\n   */\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    promptId: number\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}`\n    );\n  }\n\n  /**\n   * Update message feedback\n   */\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    promptId: number,\n    data: { reaction: 'neutral' | 'disliked' | 'liked' }\n  ): Promise<APIMessageResponse> {\n    return this.request<APIMessageResponse>(\n      `/projects/${projectId}/conversations/${sessionId}/messages/${promptId}/feedback`,\n      {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      }\n    );\n  }\n\n  /**\n   * Send message in OpenAI format\n   */\n  async sendMessageOpenAIFormat(\n    projectId: number,\n    data: {\n      messages?: Array<{ role: string; content: string }>;\n      stream?: boolean;\n      lang?: string;\n      is_inline_citation?: boolean;\n    }\n  ): Promise<any> {\n    return this.request<any>(`/projects/${projectId}/chat/completions`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ...data,\n        stream: data.stream ?? false,\n        lang: data.lang || 'en',\n        is_inline_citation: data.is_inline_citation ?? false\n      }),\n    });\n  }\n\n  // CITATIONS API METHODS\n\n  /**\n   * Get citation details\n   */\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request<CitationResponse>(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  // SOURCES API METHODS\n\n\n  /**\n   * Upload file to project\n   */\n  async uploadFile(projectId: number, file: File, options?: {\n    file_data_retension?: boolean;\n    is_ocr_enabled?: boolean;\n    is_anonymized?: boolean;\n  }): Promise<APIResponse<any>> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    if (options) {\n      Object.entries(options).forEach(([key, value]) => {\n        if (value !== undefined) {\n          formData.append(key, value.toString());\n        }\n      });\n    }\n\n    return this.request<APIResponse<any>>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  /**\n   * Analytics APIs\n   */\n  async getConversationAnalytics(\n    projectId: number, \n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/conversations${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getQueryAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      limit?: number;\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/queries${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getTrafficAnalytics(\n    projectId: number,\n    params?: {\n      start_date?: string;\n      end_date?: string;\n      period?: 'hour' | 'day' | 'week' | 'month';\n    }\n  ): Promise<APIResponse<any>> {\n    const queryParams = new URLSearchParams();\n    if (params?.start_date) queryParams.append('start_date', params.start_date);\n    if (params?.end_date) queryParams.append('end_date', params.end_date);\n    if (params?.period) queryParams.append('period', params.period);\n    \n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/traffic${queryParams.toString() ? `?${queryParams}` : ''}`);\n  }\n\n  async getStatistics(projectId: number): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/analytics/statistics`);\n  }\n\n  // Reports and Analytics methods\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request<TrafficReportResponse>(`/projects/${projectId}/reports/traffic`, {\n      method: 'GET',\n    });\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request<QueriesReportResponse>(`/projects/${projectId}/reports/queries`, {\n      method: 'GET',\n    });\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request<ConversationsReportResponse>(`/projects/${projectId}/reports/conversations`, {\n      method: 'GET',\n    });\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) {\n      queryParams.append('interval', interval);\n    }\n    \n    return this.request<AnalysisReportResponse>(\n      `/projects/${projectId}/reports/analysis${queryParams.toString() ? `?${queryParams}` : ''}`,\n      {\n        method: 'GET',\n      }\n    );\n  }\n\n  /**\n   * Page Management APIs\n   */\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    return this.request<PagesListResponse>(\n      `/projects/${projectId}/pages${queryParams.toString() ? `?${queryParams}` : ''}`\n    );\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request<DeletePageResponse>(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request<ReindexPageResponse>(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  // Page Metadata methods\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'GET',\n    });\n  }\n\n  async updatePageMetadata(\n    projectId: number, \n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request<PageMetadataResponse>(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  async previewFile(pageId: number): Promise<any> {\n    return this.request<any>(`/preview/${pageId}`);\n  }\n\n\n  /**\n   * Agent License Management APIs\n   */\n  \n  /**\n   * Get all licenses for an agent\n   */\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request<APIResponse<any[]>>(`/projects/${projectId}/licenses`);\n  }\n\n  /**\n   * Create a new license for an agent\n   */\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Get a specific license for an agent\n   */\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`);\n  }\n\n  /**\n   * Update a license for an agent\n   */\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name: string }\n  ): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  /**\n   * Delete a license for an agent\n   */\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request<APIResponse<any>>(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  /**\n   * Sources Management APIs\n   */\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request<SourcesListResponse>(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request<DeleteSourceResponse>(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request<SourceResponse>(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // LIMITS API METHODS\n  \n  /**\n   * Get user's agents, words and queries limit\n   */\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request<LimitsResponse>('/limits/usage');\n  }\n\n  // User Profile API Methods\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request<UserProfileResponse>('/user', {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n\n  // Generic request methods for use by stores\n  async get<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint);\n  }\n\n  async post<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'POST',\n      body: data instanceof FormData ? data : (data ? JSON.stringify(data) : undefined),\n    });\n  }\n\n  async put<T>(endpoint: string, data?: any): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'PUT',\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<T> {\n    return this.request<T>(endpoint, {\n      method: 'DELETE',\n    });\n  }\n}\n\nexport class APIError extends Error {\n  constructor(\n    public status: number,\n    message: string,\n    public code?: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\n// Default client instance (will be initialized with API key)\nlet defaultClient: CustomGPTAPIClient | null = null;\n\nexport function getClient(): CustomGPTAPIClient {\n  if (!defaultClient) {\n    throw new Error('API client not initialized. Call initializeClient() first.');\n  }\n  return defaultClient;\n}\n\nexport function initializeClient(config: CustomGPTClientConfig): CustomGPTAPIClient {\n  defaultClient = new CustomGPTAPIClient(config);\n  return defaultClient;\n}\n\nexport function isClientInitialized(): boolean {\n  return defaultClient !== null;\n}","export type LogLevel = 'debug' | 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      debug: 'color: #6B7280; font-weight: normal;',\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        debug: '\\x1b[90m',\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Send to server for file logging\n    if (level !== 'debug' || !this.isClient) {\n      this.sendToServer(entry);\n    }\n  }\n\n  private async sendToServer(entry: LogEntry) {\n    try {\n      await fetch('/api/log', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(entry),\n      });\n    } catch (error) {\n      // Silently fail to avoid infinite loop\n    }\n  }\n\n  debug(category: string, message: string, data?: any) {\n    this.log('debug', category, message, data);\n  }\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.debug('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * For contributors:\n * - Keep utilities pure and reusable\n * - Add JSDoc comments for all functions\n * - Include examples in comments\n * - Handle edge cases gracefully\n * - Export constants for configuration\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Suitable for temporary IDs, not cryptographically secure.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Fail silently but log for debugging\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    console.log('🔍 Parsing stream chunk:', chunk);\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      console.log('📌 SSE event:', eventType);\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      console.log('📦 SSE data:', data);\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        console.log('🎯 Parsed SSE JSON:', parsed);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        console.log('📝 Plain text data:', data);\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        console.log('🎯 Parsed raw JSON:', parsed);\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      console.log('📝 Plain text chunk:', chunk.trim());\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  const words = firstMessage.trim().split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a temporary blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * For contributors:\n * - Always handle multiple API response formats\n * - Update currentAgent when agents list changes\n * - Use optimistic updates for better UX\n * - Log errors for debugging\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n\n      /**\n       * Fetch all agents from the API\n       * \n       * Behavior:\n       * - Shows loading state during fetch\n       * - Auto-selects first agent if none selected\n       * - Handles multiple API response formats\n       * - Clears error state on success\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getAgents();\n          \n          // Handle different response formats from the API\n          // API can return: { data: [...] }, [...], or { data: { data: [...] } }\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              agents = response as Agent[];\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              // Paginated response format\n              agents = (response as any).data.data;\n            }\n          }\n          \n          console.log('Fetched agents:', agents);\n          \n          set({ \n            agents, \n            loading: false,\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], // Ensure agents is always an array even on error\n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: (agent: Agent) => {\n        set({ currentAgent: agent });\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { are_licenses_allowed?: boolean }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Customization for contributors:\n * - Add new variants in the buttonVariants object\n * - Modify colors to match brand guidelines\n * - Add loading state with spinner\n * - Implement button groups\n * - Add icon support with left/right positioning\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Base classes for all buttons\n  'inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none',\n  {\n    variants: {\n      variant: {\n        default: 'bg-brand-500 text-white hover:bg-brand-600 shadow-sm',\n        destructive: 'bg-red-500 text-white hover:bg-red-600 shadow-sm',\n        outline: 'border border-gray-300 bg-white hover:bg-gray-50 text-gray-900',\n        secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200',\n        ghost: 'hover:bg-gray-100 text-gray-900',\n        link: 'text-brand-600 underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 py-2 px-4',\n        sm: 'h-8 px-3 text-xs',\n        lg: 'h-12 px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Customization for contributors:\n * - Add citation filtering\n * - Implement citation search\n * - Add export citations feature\n * - Enhance confidence visualization\n * - Add citation grouping by domain\n * - Implement citation tooltips\n * - Add citation copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n}) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden transition-all hover:border-gray-300\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-gray-900 line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-gray-500 line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-gray-400 transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-gray-100 bg-gray-50\">\n              <p className=\"text-sm text-gray-700 mb-2\">\n                {citation.content}\n              </p>\n              \n              {/* Confidence Score */}\n              {citation.confidence && (\n                <div className=\"mb-2\">\n                  <div className=\"flex items-center justify-between text-xs text-gray-500 mb-1\">\n                    <span>Relevance</span>\n                    <span>{Math.round(citation.confidence * 100)}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                    <div \n                      className=\"bg-brand-500 h-1.5 rounded-full transition-all\"\n                      style={{ width: `${citation.confidence * 100}%` }}\n                    />\n                  </div>\n                </div>\n              )}\n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps> = ({ \n  citations, \n  onCitationClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-gray-400\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { CitationList } from './CitationList';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-gray-800 text-white hover:bg-gray-700\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-gray-900 animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  return (\n    <div className=\"prose prose-sm max-w-none text-gray-900\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-gray-100 text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'like' && 'text-green-600 hover:text-green-700'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-gray-500 hover:text-gray-700',\n          feedback === 'dislike' && 'text-red-600 hover:text-red-700'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-gray-500 hover:text-gray-700\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message, \n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-white' : 'bg-gray-50 border-y border-gray-100',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <div className=\"w-8 h-8 rounded-full bg-gray-800 flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-white\" />\n            </div>\n          ) : (\n            <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center\">\n              <Bot className=\"w-4 h-4 text-brand-600\" />\n            </div>\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-gray-500\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-gray-900 whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-gray-400\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Square, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload } from '@/types';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors\"\n    >\n      <div className=\"text-gray-600\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-gray-900 truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-gray-500 flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-red-500 flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-gray-200 rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-gray-300 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-gray-500\" />\n      </button>\n    </motion.div>\n  );\n};\n\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n}\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className=\"h-10 w-10 text-gray-600 hover:text-gray-800\"\n        title=\"Upload files\"\n      >\n        <Paperclip className=\"h-5 w-5\" />\n      </Button>\n    </>\n  );\n};\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className \n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'border-t border-gray-200 bg-white px-4 py-3 relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        {/* File Upload Button */}\n        <FileUploadButton\n          onUpload={handleFileUpload}\n          disabled={disabled}\n        />\n        \n        {/* Text Input */}\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={1}\n            className={cn(\n              'w-full resize-none rounded-lg border border-gray-300',\n              'px-3 py-2 pr-12',\n              'focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'min-h-[44px] max-h-[200px]',\n              'placeholder:text-gray-500'\n            )}\n            style={{\n              height: 'auto',\n              overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n            }}\n          />\n          \n          {/* Character Count */}\n          {input.length > 0 && (\n            <div className=\"absolute bottom-2 right-2 text-xs text-gray-400 pointer-events-none\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        \n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!canSend}\n          className={cn(\n            'h-10 w-10 flex-shrink-0',\n            disabled && 'animate-pulse'\n          )}\n          title={disabled ? 'Stop generating' : 'Send message'}\n        >\n          {disabled ? (\n            <Square className=\"h-5 w-5\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </form>\n      \n      {/* Input Hints */}\n      <div className=\"mt-2 flex items-center justify-between text-xs text-gray-500\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n        <span>Supports {CONSTANTS.ACCEPTED_FILE_TYPES.length}+ file formats</span>\n      </div>\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Customization for contributors:\n * - Add different animation styles\n * - Implement custom messages (\"Thinking...\", \"Searching...\")\n * - Add progress indicator for long operations\n * - Customize avatar appearance\n * - Add sound effects option\n * - Implement skeleton loading alternative\n * - Add estimated time remaining\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-gray-50 border-y border-gray-100',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-white border border-gray-200 flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Customization for contributors:\n * - Add agent search/filter functionality\n * - Implement agent favorites/pinning\n * - Add agent creation shortcut\n * - Customize agent avatar display\n * - Add agent status indicators\n * - Implement agent grouping/categories\n * - Add keyboard navigation support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { useAgentStore } from '@/store';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <div className={cn(\n          'w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0',\n          isSelected ? 'bg-brand-600' : 'bg-gray-200'\n        )}>\n          <Bot className={cn(\n            'w-4 h-4',\n            isSelected ? 'text-white' : 'text-gray-600'\n          )} />\n        </div>\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-gray-900 truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Metadata */}\n          <div className=\"flex items-center gap-3 mt-1 text-xs text-gray-400\">\n            {agent.settings?.chatbot_model && (\n              <span>Model: {agent.settings.chatbot_model}</span>\n            )}\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    selectAgent \n  } = useAgentStore();\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = (agent: Agent) => {\n    selectAgent(agent);\n    setIsOpen(false);\n    toast.success(`Switched to ${agent.project_name}`);\n  };\n\n  /**\n   * Toggle dropdown and fetch agents\n   * \n   * When opening, automatically fetches latest agents.\n   * Errors are logged but not shown to avoid annoying toasts.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Fetch agents when opening the dropdown\n    if (willOpen) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        console.error('Failed to fetch agents:', error);\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-gray-200 rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-gray-100 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-white border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center\">\n            <Bot className=\"w-4 h-4 text-gray-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-gray-600 font-medium\">No agents available</p>\n            <p className=\"text-xs text-gray-500\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-white border rounded-lg text-left transition-colors',\n          'hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n          isOpen && 'ring-2 ring-brand-500 border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <div className=\"w-8 h-8 rounded-full bg-brand-600 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-4 h-4 text-white\" />\n            </div>\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-gray-900 truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-gray-400 transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-gray-500\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Customization for contributors:\n * - Add citation caching\n * - Implement citation sharing\n * - Add citation bookmarking\n * - Enhance image preview (zoom, gallery)\n * - Add citation analytics tracking\n * - Implement citation export\n * - Add related citations\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading citation</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className=\"space-y-4\">\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-gray-100\">\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Globe className=\"h-4 w-4\" />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-brand-600 transition-colors truncate\"\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700\">{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className=\"pt-4 border-t space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">Citation ID</span>\n                    <span className=\"font-mono text-gray-700\">#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Has preview image</span>\n                      <ImageIcon className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-brand-600 hover:text-brand-700 transition-colors\"\n                >\n                  Visit source\n                  <ExternalLink className=\"h-3.5 w-3.5\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-gray-50',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-gray-400 hover:bg-gray-100 rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-gray-900 truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Modify EXAMPLE_PROMPTS for different starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { useMessageStore, useAgentStore, useConversationStore } from '@/store';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { ConversationManager } from './ConversationManager';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\n\n/**\n * Example prompts shown to users when starting a new conversation\n * Customize these based on your agent's capabilities and use cases\n */\nconst EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\",\n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className=\"p-3 text-left bg-white border border-gray-200 rounded-lg hover:border-gray-300 hover:shadow-sm transition-all text-sm text-gray-700\"\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center h-full px-4 py-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center max-w-md\"\n      >\n        {/* Logo */}\n        <div className=\"w-16 h-16 rounded-full bg-brand-100 flex items-center justify-center mb-6 mx-auto\">\n          <Sparkles className=\"w-8 h-8 text-brand-600\" />\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className=\"text-gray-600 mb-8\">\n          I'm here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 w-full\">\n          {EXAMPLE_PROMPTS.map((prompt, idx) => (\n            <motion.div\n              key={idx}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage \n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  }, [conversationMessages, streamingMessage]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    // This would be handled by the message store\n    console.log('Message feedback:', messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-gray-50 to-white',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-red-800\">\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"font-medium\">\n              {error.includes('unauthorized') || error.includes('403') \n                ? 'Authorization Error' \n                : 'Error'}\n            </span>\n          </div>\n          <p className=\"text-red-700 mt-1 text-sm\">\n            {error.includes('unauthorized') || error.includes('403')\n              ? 'Your API key does not have permission to access this agent\\'s conversations. Please check your API key permissions or contact support.'\n              : error}\n          </p>\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-gray-200 bg-white\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-gray-100\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center flex-shrink-0\">\n              <Bot className=\"w-5 h-5 text-white\" />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-gray-900 truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-gray-500\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-gray-100 transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header\n  if (mode === 'standalone') {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-gray-900\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.debug('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, []); // Empty dependency array to run only once on mount\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n    console.log('Agent settings requested for:', agent.project_name);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-white',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-gray-200',\n        mode === 'floating' && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-gray-200',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1\" />\n      <ChatInput\n        onSend={handleSendMessage}\n        disabled={isStreaming}\n        placeholder={isStreaming ? \"AI is thinking...\" : \"Send a message...\"}\n      />\n      \n      {/* Branding Footer */}\n      {(mode === 'widget' || mode === 'floating') && (\n        <div className=\"px-4 py-2 border-t border-gray-100 bg-gray-50\">\n          <a\n            href=\"https://customgpt.ai\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-gray-500 hover:text-gray-700 transition-colors block text-center\"\n          >\n            Powered by CustomGPT.ai\n          </a>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Customization for contributors:\n * - Add conversation categories/folders\n * - Implement bulk operations\n * - Add export/import functionality\n * - Customize sidebar width\n * - Add conversation pinning\n * - Implement conversation search\n * - Add conversation templates\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  RefreshCw,\n  Database,\n  BarChart3,\n  FileText,\n  Bug\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/store';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    onDelete(conversation.id.toString());\n    setShowMenu(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => !isEditing && onSelect(conversation)}\n    >\n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-gray-900 bg-white border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-gray-900 text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-gray-500\">\n            <Calendar className=\"w-3 h-3\" />\n            <span>{formatTimestamp(conversation.updated_at)}</span>\n            {conversation.message_count && (\n              <>\n                <span>•</span>\n                <span>{conversation.message_count} messages</span>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-32 bg-white border border-gray-200 rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      console.log('ConversationSidebar: Agent changed, fetching conversations for:', currentAgent.project_name, currentAgent.id);\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n      console.log('ConversationSidebar: No current agent selected');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Filter conversations based on search query\n  // Debug log to understand the conversations type\n  if (!Array.isArray(conversations)) {\n    console.warn('Conversations is not an array:', typeof conversations, conversations);\n  }\n  \n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter(conversation =>\n        conversation.name.toLowerCase().includes(searchQuery.toLowerCase())\n      )\n    : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      console.error('Failed to create conversation:', error);\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      console.error('Failed to load messages for conversation:', error);\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      console.error('Failed to delete conversation:', error);\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      console.error('Failed to rename conversation:', error);\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className={cn('w-12 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-80 bg-gray-50 border-r border-gray-200 flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200 bg-white\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-gray-900\">Conversations</h2>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"h-8 w-8\"\n            title=\"Collapse sidebar\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full pl-9 pr-3 py-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent\"\n          />\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          {isCreating ? 'Creating...' : 'New Chat'}\n        </Button>\n        \n        <div className=\"border-t border-gray-200 pt-2 mt-3 space-y-1\">\n          <Link href=\"/analytics\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <BarChart3 className=\"w-4 h-4\" />\n              Analytics\n            </Button>\n          </Link>\n          \n          <Link href=\"/pages\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <FileText className=\"w-4 h-4\" />\n              Pages\n            </Button>\n          </Link>\n          \n          <Link href=\"/sources\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Database className=\"w-4 h-4\" />\n              Sources\n            </Button>\n          </Link>\n          \n          <Link href=\"/debug\">\n            <Button\n              className=\"w-full justify-start gap-2\"\n              variant=\"ghost\"\n              size=\"sm\"\n            >\n              <Bug className=\"w-4 h-4\" />\n              Debug Logs\n            </Button>\n          </Link>\n        </div>\n        \n        <Button\n          onClick={() => {\n            if (currentAgent) {\n              logger.info('UI', 'Manual refresh conversations clicked', {\n                agentId: currentAgent.id,\n                agentName: currentAgent.project_name\n              });\n              fetchConversations(currentAgent.id);\n            }\n          }}\n          disabled={!currentAgent || loading}\n          className=\"w-full justify-start gap-2\"\n          variant=\"ghost\"\n          size=\"sm\"\n        >\n          <RefreshCw className={cn(\"w-4 h-4\", loading && \"animate-spin\")} />\n          Refresh Conversations\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 space-y-3\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n                <div className=\"h-3 bg-gray-100 rounded w-3/4\" />\n              </div>\n            ))}\n          </div>\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-red-600 mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-500\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-gray-400 mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-red-500\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200 bg-white\">\n        <div className=\"text-xs text-gray-500 text-center\">\n          {filteredConversations.length} conversation{filteredConversations.length !== 1 ? 's' : ''}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Customization for contributors:\n * - Add new deployment modes in the mode prop\n * - Customize sidebar behavior and persistence\n * - Add keyboard shortcuts for sidebar toggle\n * - Implement mobile-responsive sidebar\n * - Add sidebar position options (left/right)\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { useConversationStore, useMessageStore } from '@/store';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * For contributors: Consider persisting this state to localStorage\n   * to remember user preference across sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-white\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n        />\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig } from '../types';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\nimport { WidgetProvider } from './WidgetContext';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property apiKey - Required: Your CustomGPT API key\n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties\n  apiKey: string;\n  agentId: number | string;\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * \n * @example\n * // Basic embedded widget\n * const widget = CustomGPTWidget.init({\n *   apiKey: 'your-api-key',\n *   agentId: '123',\n *   containerId: 'chat-container'\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   apiKey: 'your-api-key',\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  private sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    if (!config.apiKey) {\n      throw new Error('CustomGPT Widget: API key is required');\n    }\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false,\n      ...config,\n    };\n\n    // Initialize session ID\n    // If isolateConversations is true, ensure each widget has a unique session\n    if (this.config.isolateConversations !== false) {\n      // Default to isolated conversations - each widget gets its own session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // DEPRECATED: Global reference kept for backward compatibility\n      // Don't overwrite if already exists to preserve first widget\n      if (!(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Set up the API key in the config store\n    useConfigStore.getState().setApiKey(this.config.apiKey);\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = this.config.apiKey === 'demo-api-key' || \n                      this.config.apiKey.startsWith('demo-') || \n                      this.config.apiKey.startsWith('test-');\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Fetch the actual agent details\n    const agentId = typeof this.config.agentId === 'string' ? parseInt(this.config.agentId) : this.config.agentId;\n    \n    if (!isDemoMode) {\n      try {\n        // Try to fetch agent details to get the project name\n        const client = getClient();\n        const agentsResponse = await client.getAgents();\n        const agents = Array.isArray(agentsResponse) ? agentsResponse : (agentsResponse as any).data || [];\n        const agent = agents.find((a: any) => a.id === agentId);\n        \n        if (agent) {\n          // Use custom agent name if provided\n          if (this.config.agentName) {\n            agent.project_name = this.config.agentName;\n          }\n          \n          // Use the actual agent with proper project name\n          useAgentStore.getState().selectAgent(agent);\n          // Clear other agents to ensure only this one is available\n          useAgentStore.getState().setAgents([agent]);\n        } else {\n          // Fallback if agent not found\n          const fallbackAgent: any = {\n            id: agentId,\n            project_name: this.config.agentName || `Project ${agentId}`,\n            is_chat_active: true,\n          };\n          useAgentStore.getState().selectAgent(fallbackAgent);\n          useAgentStore.getState().setAgents([fallbackAgent]);\n        }\n      } catch (error) {\n        // Use fallback on error\n        const fallbackAgent: any = {\n          id: agentId,\n          project_name: this.config.agentName || `Project ${agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(fallbackAgent);\n        useAgentStore.getState().setAgents([fallbackAgent]);\n      }\n    } else {\n      // For demo mode, always use fallback agent\n      const fallbackAgent: any = {\n        id: agentId,\n        project_name: this.config.agentName || `Demo Assistant`,\n        is_chat_active: true,\n      };\n      useAgentStore.getState().selectAgent(fallbackAgent);\n      useAgentStore.getState().setAgents([fallbackAgent]);\n    }\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // Render the widget first\n    this.render();\n    \n    // Initialize conversation after render to ensure ConversationManager is mounted\n    if (this.config.enableConversationManagement) {\n      const conversations = this.getConversations();\n      \n      if (conversations.length === 0) {\n        // Create initial conversation after a small delay to ensure components are mounted\n        setTimeout(() => {\n          this.createConversation('New Chat');\n        }, 100);\n      } else {\n        // Set current conversation to the first one\n        this.currentConversationId = conversations[0].id;\n        \n        // Only sync with global store if explicitly not isolated\n        if (this.config.isolateConversations === false && typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          const currentConv = conversations[0];\n          const fullConversation = {\n            ...currentConv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: currentConv.title\n          };\n          \n          // Set only the current conversation\n          useConversationStore.setState({\n            conversations: [fullConversation as any],\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // DEPRECATED: This global reference is kept for backward compatibility\n      // New code should use WidgetContext instead\n      // Only set if not already set to avoid overwriting first widget\n      if (typeof window !== 'undefined' && !(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <WidgetProvider widgetInstance={widgetRef}>\n          <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n            <ChatLayout\n              mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n              onClose={this.config.mode === 'floating' ? handleClose : undefined}\n              showSidebar={false} // Disable sidebar for widget mode\n              className=\"w-full h-full\"\n              // Pass conversation management configuration\n              enableConversationManagement={this.config.enableConversationManagement}\n              maxConversations={this.config.maxConversations}\n              sessionId={this.sessionId}\n              threadId={currentConvId} // Pass current conversation ID\n              onConversationChange={this.config.onConversationChange}\n              onMessage={this.config.onMessage}\n              // Pass widget instance for isolated conversation management\n              widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n              // Pass current conversations for isolated mode\n              conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n              currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n                this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n              // Pass refresh key to trigger ConversationManager updates\n              conversationRefreshKey={this.conversationRefreshKey}\n            />\n            <Toaster \n              position=\"top-center\" \n              toastOptions={{\n                style: { zIndex: 10000 }\n              }}\n            />\n          </div>\n        </WidgetProvider>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public createConversation(title?: string): any {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      // Add required fields for conversation store compatibility\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Don't update the global store if we're in isolated mode\n    if (!this.config.isolateConversations) {\n      // Only update global store if sharing conversations\n      if (typeof window !== 'undefined') {\n        const { useConversationStore, useMessageStore } = require('../store');\n        const messageStore = useMessageStore.getState();\n        \n        // Get all widget conversations (local storage)\n        const allWidgetConversations = this.getConversations();\n        \n        // Convert all widget conversations to store format\n        const storeConversations = allWidgetConversations.map(conv => ({\n          ...conv,\n          project_id: parseInt(this.config.agentId as string) || 0,\n          session_id: this.sessionId,\n          name: conv.title\n        }));\n        \n        // Update store with all widget conversations, with new one as current\n        useConversationStore.setState({\n          conversations: storeConversations as any,\n          currentConversation: newConversation as any\n        });\n        \n        // Clear any existing messages for this conversation ID to ensure welcome message shows\n        messageStore.clearMessages(newConversation.id);\n      }\n    }\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation();\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    this.container = null;\n    this.root = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { initializeClient, isClientInitialized } from '@/lib/api/client';\n\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null,\n      baseURL: 'https://app.customgpt.ai/api/v1',\n      theme: 'light',\n\n      setApiKey: (key: string) => {\n        set({ apiKey: key });\n        \n        // Initialize API client with new key\n        if (key) {\n          initializeClient({\n            apiKey: key,\n            baseURL: get().baseURL,\n          });\n        }\n      },\n\n      setBaseURL: (url: string) => {\n        set({ baseURL: url });\n        \n        // Re-initialize client if API key exists\n        const { apiKey } = get();\n        if (apiKey) {\n          initializeClient({\n            apiKey,\n            baseURL: url,\n          });\n        }\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update document class for theme\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      partialize: (state) => ({\n        apiKey: state.apiKey,\n        baseURL: state.baseURL,\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize API client on rehydration if API key exists\n        if (state?.apiKey && !isClientInitialized()) {\n          initializeClient({\n            apiKey: state.apiKey,\n            baseURL: state.baseURL,\n          });\n        }\n        \n        // Apply theme on rehydration\n        if (state?.theme && typeof window !== 'undefined') {\n          document.documentElement.className = state.theme;\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n\n      fetchConversations: async (projectId: number) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getConversations(projectId);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          if (response && typeof response === 'object') {\n            if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n              conversations = (response as any).data.data;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          set({ \n            conversations, \n            loading: false,\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation, conversations } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // Look for existing conversations for this project\n        const projectConversations = conversations.filter(c => c.project_id === projectId);\n        if (projectConversations.length > 0) {\n          const conversation = projectConversations[0];\n          set({ currentConversation: conversation });\n          return conversation;\n        }\n        \n        // Create new conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        currentConversation: state.currentConversation,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state && !Array.isArray(state.conversations)) {\n          state.conversations = [];\n        }\n      },\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * For contributors:\n * - Always update both local state and storage\n * - Handle API errors gracefully with fallbacks\n * - Use logger for debugging\n * - Maintain message order and IDs\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to save messages to local storage:', error);\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    console.error('Failed to load messages from local storage:', error);\n    return null;\n  }\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Check if in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      throw new Error('No agent selected');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      if (files && files.length > 0) {\n        const client = getClient();\n        await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50)\n      });\n      \n      try {\n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          { \n            prompt: content,\n            response_source: 'default',  // Required field as per API documentation\n            stream: 1  // Include stream parameter in body as per SDK examples\n          },\n          {\n            onChunk: (chunk) => {\n              logger.debug('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current) {\n                  set({\n                    streamingMessage: {\n                      ...current,\n                      citations: chunk.citations\n                    }\n                  });\n                }\n              }\n            },\n            onComplete: () => {\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                get().addMessage(conversation.id.toString(), finalMessage);\n              }\n              \n              set({ \n                streamingMessage: null,\n                isStreaming: false,\n              });\n            },\n            onError: async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: content,\n                    response_source: 'default',  // Required field as per API documentation\n                    stream: 0  // Explicitly disable streaming\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  finalMessage.citations = messageData?.citations || [];\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                console.error('Both streaming and fallback failed:', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: `Communication error: ${fallbackError instanceof Error ? fallbackError.message : 'Unknown error'}`,\n                });\n              }\n            },\n          }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      console.error('Failed to send message:', error);\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: error instanceof Error ? error.message : 'Failed to send message',\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) return;\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) return;\n\n    try {\n      // Update local state immediately\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API (assuming we have the prompt ID)\n      // Note: This would need to be adjusted based on the actual API structure\n      // const client = getClient();\n      // await client.updateMessageFeedback(currentAgent.id, currentConversation.id, promptId, {\n      //   reaction: feedback === 'like' ? 'liked' : 'disliked'\n      // });\n    } catch (error) {\n      console.error('Failed to update message feedback:', error);\n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        messages.forEach(msg => {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: msg.citations || [],\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction || msg.feedback,\n            });\n          }\n        });\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, formattedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, formattedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { startDate, endDate } = get().dateRange;\n      \n      // Fetch all analytics data in parallel\n      const [conversations, queries, traffic, statistics, reports] = await Promise.all([\n        client.getConversationAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getQueryAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n        }),\n        client.getTrafficAnalytics(projectId, {\n          start_date: startDate,\n          end_date: endDate,\n          period: 'day',\n        }),\n        client.getStatistics(projectId),\n        client.getAnalysisReport(projectId, 'weekly'),\n      ]);\n\n      // Transform the data to match our interface\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversations.data?.total || 0,\n          active: conversations.data?.active || 0,\n          trend: conversations.data?.trend || 0,\n          data: conversations.data?.timeline || [],\n        },\n        queries: {\n          total: queries.data?.total || 0,\n          successful: queries.data?.successful || 0,\n          failed: queries.data?.failed || 0,\n          avgResponseTime: queries.data?.avg_response_time || 0,\n          topQueries: queries.data?.top_queries || [],\n          data: queries.data?.timeline || [],\n        },\n        traffic: {\n          uniqueUsers: traffic.data?.unique_users || 0,\n          pageViews: traffic.data?.page_views || 0,\n          avgSessionDuration: traffic.data?.avg_session_duration || 0,\n          bounceRate: traffic.data?.bounce_rate || 0,\n          data: traffic.data?.timeline || [],\n        },\n        statistics: {\n          totalMessages: statistics.data?.total_messages || 0,\n          totalConversations: statistics.data?.total_conversations || 0,\n          avgMessagesPerConversation: statistics.data?.avg_messages_per_conversation || 0,\n          satisfactionRate: statistics.data?.satisfaction_rate || 0,\n          responseAccuracy: statistics.data?.response_accuracy || 0,\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error) {\n      console.error('Failed to fetch analytics:', error);\n      set({ \n        analytics: null,\n        error: error instanceof Error ? error.message : 'Failed to fetch analytics',\n        loading: false,\n      });\n      toast.error('Failed to fetch analytics data');\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Temporarily disabled - sources are now managed directly in components using the API\n// This store will be removed or updated to match the new API structure\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Mock implementation to avoid breaking imports\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // const response = await client.getSources(projectId);\n      \n      const sources: Source[] = []; // Array.isArray(response.data) ? response.data : [];\n      set({ sources, loading: false });\n      throw new Error('Sources API integration needs update');\n    } catch (error) {\n      console.error('Failed to fetch sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      console.error('Failed to fetch source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      console.error('Failed to upload sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      console.error('Failed to update source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      console.error('Failed to delete source:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      console.error('Failed to delete sources:', error);\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      console.error('Failed to sync sources:', error);\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.get<CustomGPTResponse<UserProfile>>('/user');\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error) {\n          console.error('Failed to fetch profile:', error);\n          set({ \n            error: `Failed to fetch profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to load profile');\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.post<CustomGPTResponse<UserProfile>>('/user', formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error) {\n          console.error('Failed to update profile:', error);\n          set({ \n            error: `Failed to update profile: ${error instanceof Error ? error.message : 'Unknown error'}`,\n            loading: false \n          });\n          toast.error('Failed to update profile');\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse } from '@/types';\n\nexport interface ProjectSettings {\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  default_prompt?: string;\n  example_questions?: string[];\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_msg_lang?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  persona_instructions?: string;\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\nexport interface ProjectStats {\n  total_conversations: number;\n  total_messages: number;\n  total_sources: number;\n  total_pages: number;\n  last_activity: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectSettings>>(\n        `/projects/${projectId}/settings`\n      );\n\n      if (response.status === 200) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields\n            value.forEach((question, index) => {\n              formData.append(`example_questions[${index}]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().post<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/settings`,\n        formData\n      );\n\n      if (response.status === 200 && response.data.updated) {\n        // Merge updated settings with current settings\n        const currentSettings = get().settings || {};\n        const newSettings = { ...currentSettings, ...settingsUpdate };\n        \n        set({ \n          settings: newSettings, \n          settingsLoading: false \n        });\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectPlugin[]>>(\n        `/projects/${projectId}/plugins`\n      );\n\n      if (response.status === 200) {\n        set({ \n          plugins: Array.isArray(response.data) ? response.data : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().put<APIResponse<{ updated: boolean }>>(\n        `/projects/${projectId}/plugins/${pluginId}`,\n        { enabled }\n      );\n\n      if (response.status === 200) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().get<APIResponse<ProjectStats>>(\n        `/projects/${projectId}/stats`\n      );\n\n      if (response.status === 200) {\n        set({ \n          stats: response.data, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0,\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch licenses';\n      set({ \n        error: errorMessage,\n        loading: false,\n        licenses: []\n      });\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...',\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to create license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * For contributors:\n * - Add new stores here when creating new features\n * - Keep stores focused on a single domain\n * - Use TypeScript interfaces from @/types\n * - Handle errors gracefully in async operations\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(7923)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","CustomGPTAPIClient","constructor","config","_defineProperty","Map","apiKey","baseURL","timeout","retryAttempts","retryDelay","logger","info","hasApiKey","apiKeyPreview","substring","request","endpoint","options","params","fetchOptions","url","URL","Object","entries","forEach","key","value","searchParams","append","toString","headers","body","FormData","requestOptions","apiRequest","method","JSON","parse","undefined","retryWithBackoff","async","abortController","AbortController","requestId","generateRequestId","abortControllers","set","timeoutId","setTimeout","abort","response","fetch","signal","clearTimeout","delete","ok","errorText","text","errorMessage","errorCode","errorData","data","code","message","error","status","enhancedMessage","getEnhancedErrorMessage","apiError","originalMessage","fromEntries","APIError","json","apiResponse","dataPreview","stringify","Error","name","streamRequest","streamOptions","onChunk","onComplete","onError","hasBody","bodyContent","contentType","get","isEventStream","includes","reader","getReader","decoder","TextDecoder","buffer","hasReceivedData","done","read","warn","decode","stream","lines","split","pop","line","trim","debug","fullLine","lineLength","length","chunk","parseStreamChunk","type","hasContent","content","contentPreview","hasCitations","citations","originalLine","releaseLock","cancelRequest","controller","cancelAllRequests","clear","Math","random","Date","now","getAgents","createAgent","formData","project_name","sitemap_path","files","file","index","is_shared","getAgent","id","updateAgent","are_licenses_allowed","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","isFormData","getConversations","projectId","enhancedParams","userFilter","createConversation","updateConversation","sessionId","deleteConversation","getMessages","lang","sendMessage","payload","prompt","response_source","custom_persona","chatbot_model","keys","sendMessageStream","hasCustomPersona","responseSource","streamParam","getMessageById","promptId","updateMessageFeedback","sendMessageOpenAIFormat","is_inline_citation","getCitation","citationId","uploadFile","getConversationAnalytics","queryParams","URLSearchParams","start_date","end_date","limit","getQueryAnalytics","getTrafficAnalytics","period","getStatistics","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","page","order","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","metadata","previewFile","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getUserLimits","getUserProfile","updateUserProfile","post","put","details","super","defaultClient","getClient","initializeClient","isClientInitialized","Logger","isClient","window","getInstance","instance","formatMessage","entry","timestamp","level","category","stack","formatted","toUpperCase","writeToFile","log","toISOString","logs","push","slice","sendToServer","getLogs","clearLogs","authCheck","authError","navigation","route","storeAction","store","action","cn","inputs","twMerge","clsx","generateId","formatFileSize","bytes","i","floor","parseFloat","pow","toFixed","getFileIcon","fileType","toLowerCase","isFileTypeAllowed","allowedTypes","some","formatTimestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","copyToClipboard","navigator","clipboard","writeText","startsWith","parsed","delta","choices","jsonError","parseError","delay","ms","Promise","resolve","fn","maxAttempts","baseDelay","lastError","attempt","delayTime","generateConversationName","firstMessage","title","join","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","useAgentStore","create","persist","agents","currentAgent","loading","fetchAgents","client","Array","isArray","newAgent","state","selectAgent","agent","setAgents","current","find","a","updatedAgent","map","filteredAgents","filter","partialize","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","size","sm","lg","icon","defaultVariants","Button","React","className","asChild","props","ref","_jsx","displayName","CitationCard","citation","isExpanded","onToggle","onClick","_jsxs","children","source","ChevronDown","AnimatePresence","motion","div","initial","height","opacity","animate","exit","transition","duration","confidence","round","style","width","href","target","rel","ExternalLink","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","hasMore","BookOpen","idx","y","has","newExpanded","add","toggleExpanded","CodeBlock","language","copied","setCopied","toast","success","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","fontSize","StreamingCursor","MessageContent","isStreaming","ReactMarkdown","remarkPlugins","remarkGfm","components","match","exec","String","replace","MessageActions","onFeedback","feedback","setFeedback","handleFeedback","Copy","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","role","User","Bot","FileChip","onRemove","fileIcon","scale","_Fragment","progress","AlertCircle","disabled","X","FileUploadButton","onUpload","fileInputRef","useRef","multiple","accept","onChange","e","from","handleClick","click","Paperclip","ChatInput","onSend","placeholder","maxLength","input","setInput","setFiles","isDragOver","setIsDragOver","textareaRef","adjustTextareaHeight","useCallback","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","prev","simulateUpload","setInterval","clearInterval","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","reduce","acc","maxSize","onDragEnter","onDragLeave","canSend","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Square","Send","TypingIndicator","AgentItem","isSelected","onSelect","onSettingsClick","Check","is_chat_active","stopPropagation","Settings","AgentSelector","showSettings","isOpen","setIsOpen","dropdownRef","useEffect","handleClickOutside","event","contains","document","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","imageError","setImageError","effectiveProjectId","fetchCitationDetails","parseInt","hasImage","image","err","Loader","src","alt","Globe","description","ImageIcon","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","conversations","setConversations","editingId","setEditingId","editTitle","setEditTitle","setIsExpanded","loadConversations","stored","localStorage","getItem","handleEditSave","conversationId","updated","c","setItem","currentConversation","MessageCircle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","handleCreateConversation","Plus","conversation","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","filtered","handleDelete","Trash2","WidgetContext","createContext","WidgetProvider","widgetInstance","Provider","EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","Sparkles","MessageArea","messages","streamingMessage","useMessageStore","useConversationStore","scrollRef","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","conversationMessages","scrollTo","top","behavior","handleCitationClick","citationIndex","citationTitle","fillRule","clipRule","handleMessageFeedback","messageId","ChatHeader","mode","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","cancelStreaming","widget","useContext","setCurrentConversationId","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","agentId","agentName","switchConversation","newConv","configuration","contentLength","hasFiles","fileCount","isAuthError","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","inputRef","menuRef","select","handleSaveEdit","onBlur","Calendar","updated_at","message_count","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","searchQuery","setSearchQuery","isCreating","setIsCreating","fetchConversations","selectConversation","clearMessages","loadMessages","isDemoMode","__customgpt_demo_mode","isActive","filteredConversations","conversationName","project_id","messageCount","errorType","handleRenameConversation","newName","session_id","MessageSquare","Search","Link","BarChart3","FileText","Database","Bug","handleDeleteConversation","_","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","storeCurrentConversation","handleToggleSidebar","CustomGPTWidget","theme","position","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","performance","substr","generateSessionId","instanceKey","__customgpt_widget_instance","init","useConfigStore","getState","setApiKey","__customgpt_sessions","__customgpt_session","fallbackAgent","agentsResponse","createContainer","render","require","currentConv","fullConversation","setState","__customgpt_widget_instances","__customgpt_active_widget_session","container","getElementById","createElement","setupFloatingStyles","appendChild","assign","zIndex","boxShadow","overflow","backgroundColor","classList","bottom","right","left","display","transform","createRoot","WidgetApp","currentConvId","handleClose","close","Toaster","toastOptions","open","storeConversations","conv","newConversation","unshift","saveConversations","messageStore","updateConversationTitle","newTitle","DOMException","cleanupOldConversations","recent","onOpen","toggle","destroy","unmount","parentNode","removeChild","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","setBaseURL","setTheme","documentElement","onRehydrateStorage","responseType","hasData","dataLength","count","messagesCount","updatedConversations","updatedConversation","ensureConversation","projectConversations","getSessionId","__customgpt_current_session","sessions","sessionIds","sessionStorage","StreamHandler","processStream","callbacks","currentMessage","isComplete","cancel","processLine","onCitation","getCurrentMessage","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","cancelAllStreams","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","cache","agentStore","conversationStore","messageLength","hasSessionId","isNew","userMessage","addMessage","assistantMessage","all","messageContent","updateStreamingMessage","finalMessage","streamError","messageData","openai_response","fallbackError","setupError","newMessages","existingIndex","findIndex","m","updatedMessage","getMessagesForConversation","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","created_at","user_query","response_feedback","reaction","formattedCount","cachedMessages","loadMessagesFromStorage","useUIStore","sidebarOpen","settingsOpen","setSidebarOpen","setSettingsOpen","setFontSize","remove","formatDate","getDefaultDateRange","endDate","startDate","setDate","getDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","queries","traffic","statistics","reports","analyticsData","total","active","trend","timeline","successful","failed","avgResponseTime","avg_response_time","topQueries","top_queries","uniqueUsers","unique_users","pageViews","page_views","avgSessionDuration","avg_session_duration","bounceRate","bounce_rate","totalMessages","total_messages","totalConversations","total_conversations","avgMessagesPerConversation","avg_messages_per_conversation","satisfactionRate","satisfaction_rate","responseAccuracy","response_accuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","createObjectURL","download","revokeObjectURL","reset","usePageStore","pages","paginationInfo","current_page","per_page","last_page","fetchPages","setQueryParams","useSourceStore","sources","currentSource","sortBy","sortOrder","syncStatus","syncing","fetchSources","fetchSource","uploadSources","uploadPromises","reject","updateSource","updates","bulkDelete","sourceIds","syncSources","query","setFilter","selectSource","useProfileStore","profile","fetchProfile","updateProfile","profilePhoto","activeRequests","useProjectSettingsStore","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","updateSettings","settingsUpdate","question","File","newSettings","fetchPlugins","updatePlugin","pluginId","enabled","plugin","fetchStats","useLicenseStore","licenses","fetchLicenses","dataType","fullResponse","l","errorStatus","fullError","dataStructure","licenseKey","newLicense","license","licenseName","clearError","initializeStores","cleanupStores","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","result","chunkIds","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","n","getter","__esModule","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}